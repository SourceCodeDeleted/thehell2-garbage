//===============================================================
// dataseg.asm
//===============================================================
  
int MainMenuEnterFlag; // используется в hell.dll

char* PlayerTrnName[128] = {
	"Monsters\\Bat\\orange.trn",	
};
uchar* PlayerTrn[128];

int WinBuildVer;		// 0x007002A0 
int WinMajorMinorVer = 0x0601;	// 0x007002A4 // 0x0602 old value (?)
int WinMajorVer;		// 0x007002A8 
int WinMinorVer;		// 0x007002AC 

int IsWorldProcess; // 00575294

char GameCDKey[] = "DiabloCD"; // 004A0B54
uint DoMaxCount_6854FC;
char* LoadingScreenCEL;
int ProgressBarIndex; // 00685500
Hash* Hash32KPtr;
LPVOID SaveFileHashBuffer32K;
uint MpqSeekDistanceToMove; // 006AB7A8
int SaveWrited;
char SaveCreated;
int NotExitToWindows;
int BoolWithPlayer;
int IsWaitingNetTimeOut_MayBe;
char DiabloKilledThisSession;
int IsZoomDisable;
int NetCursorItemId;
char MouseButtonPressed = MBP_0_NONE;                        // 1=left, 2=right
int IsShiftPressed = 0;
bool ShiftReleasedEvent = false;
bool ShiftPressedEvent = false;
bool LButtonEvent = false;
bool RButtonEvent = false;
int OldMouseButtonPressed = MBP_0_NONE;
int EasyClick = 0;
int IsAltPressed = 0;
int AutoClickDelay = 0;

// оптимизация. в оригинале свич
//                 0  1  2  3  4  5  6  7  8
int RowStep[ 9 ] = { 0, 0, 1, -1, 0, 1, -1, -1, 1 };
int ColStep[ 9 ] = { 0, 1, 0, 0, -1, 1, 1, -1, -1 };

int MainDrawCount = 0;
int AllDrawCount = 0;
int NotMainDrawCount = 0;
int FPS = 0;

HWND global_hWnd, SecWnd;
int( __stdcall * OldTopLevelExceptionFilter )(struct _EXCEPTION_POINTERS*);
int CursorY;
int CursorX;

char VideoWindowExists;

// для автоматического создания сетевой игры без главного меню
char StatStr[ 128 ] = 
#ifdef TH1
"0\rnet1\rLTRH 1 0 0 25 5 15 20 200 0"; // HRTL
#else
"0\rnet1\rLLEH 1 0 0 25 5 15 20 200 0"; // HELL
#endif

Item TempItem;
int DualLeftHand;

char Enable5Class;
char Enable6Class;
char SomeBoolFlag_17;
int SomeLevelRandSeed;
int DwordArrayWithPortalLevel[ 26 ];
int SomeArrayWithLevels[ 25 ];
int SomeLevelArray_0[ 26 ];
int SomeLevelArray_1[ 26 ];
int OldTickCount8;
uint PaletteFrameSync;

char aHashTable[]	= "(hash table)"; // 004B3AC4
char aBlockTable[]	= "(block table)"; // 004B3AD4
char GameClientName[] = "The Hell Retail"; // "The Hell 2 Beta"; // 004B3CDC "The Hell Retail"
char aLocal[]		= "local"; // 004B3CEC
char aSitem[]		= "SItem"; // 004A5B0C
// 004A56A0
char OilsName[10][25]	= { 
	"Oil of Repair II",
	"Oil of Repair III",
	"Oil of Repair IV",
	"Oil of Repair V",
	"Oil of Repair VI",
	"Blacksmith Oil",
	"Oil of Fortitude",
	"Oil of Repair I",
	"Oil of Hardening",
	"Oil of Repair VII"
};

char* KeyNameTable[4] = { "F9","F10","F11","F12" };

char aIntro[]		= "Intro";            
char aGendataDiabvic[]	= "gendata\\DiabVic1.smk"; // 004B3944
unsigned int ScreenGamma = 100;
char PaletteLightening = 1;		// ...
char StepOrientationIndex[9] = {// 004B5A84
	5, 1, 6, 
	2, 0, 3, 
	8, 4, 7 
};

int CountOfSpeeches = 382; // TH1, а должно быть 394, хотя может здеть только используемое количество, без заготовок
double _0_95_TimeCoef = 0.95; // 004902D8
double _0_01_ = 0.01; // 004902F8
double GammaKoef = 0.00390625; // 0x00490300
double _256_0 = 256.0; // 00490308
// 004903D8
char ConstByteArrayForMap152x8[8] = { 0, 0, 0, 0, 3, 0, 0, 0 };

char ZeroString[8] = {0,0,0,0,0,0,0,0};

int StringRowYPosition[40] = { 0, 12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264, 276,
	288, 300, 312, 324, 336, 348, 360, 372, 384, 396, 408, 420, 432, 444, 456, 468 };

char* TownersNames[9] = { "Griswold",  "Pepin",  "",  "Ogden",  "Cain",  "Farnham", 	"Adria", "Gillian",  "Wirt" };

char* ClassAnimName[6] = {// 00490398
	"Warrior",  
	"Rogue",  
	"Sorceror",  
	"Monk", 
	"Assassin",  
	"Gladiator" 
};
char* ClassAnimNameBase[6] = {// 004903B0
	"Warrior",  
	"Rogue",  
	"Sorceror",  
	"Monk", 
	"Rogue",  
	"Warrior"
};
double _0_1_ = 0.1;  // 004903C8
double _m_1_ = -1.0; // 004903D0
double _80_0 = 80.0; // 00489620

// 00833408
uchar ItemWidthTable[MAX_1780_ITEM_PICS] = {
	/* 0*/	0,	33,	32,	32,	32,	32,	32,	32,	32,	32,	32,	23,	28,	56,	56,	56,	28,	28,	28,	28,
	/*20*/	28,	28,	56,	28,	56,	28,	28,	56,	28,	28,	28,	56,	56,	56,	56,	28,	56,	56,	28,	56,
	/*40*/	28,	56,	28,	28,	56,	56,	28,	28,	28,	28,	28,	56,	56,	56,	56,	56,	28,	28,	28,	28,
	/*60*/	28,	56,	28,	28,	56,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,
	/*80*/	28,	28,	28,	28,	28,	28,	28,	56,	56,	56,	56,	56,	28,	56,	56,	56,	56,	56,	56,	56,
	/*100*/	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,
	/*120*/	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,
	/*140*/	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,
	/*160*/	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,
	/*180*/	28,	56,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	56,	56,	28,	28,	28,	28,	28,	28,
	/*200*/	56,	56,	56,	56,	56,	56,	28,	28,	56,	56,	56,	56,	28,	56,	28,	56,	56,	56,	56,	56,
	/*220*/	56,	56,	56,	56,	56,	56,	56,	28,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	28,
	/*240*/	56,	28,	28,	56,	56,	28,	28,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,
	/*260*/	56,	56,	56,	56,	56,	56,	56,	28,	28,	28,	28,	28,	28,	28,	28,	56,	28,	56,	28,	56,
	/*280*/	56,	56,	56,	56,	56,	56,	56,	56,	56,	28,	56,	56,	56,	56,	28,	56,	56,	56,	56,	56,
	/*300*/	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	28,	28,	28,	28,	28,	28,	28,	56,	28,
	/*320*/	56,	28,	28,	28,	56,	56,	56,	56,	28,	56,	28,	28,	56,	28,	56,	56,	56,	28,	28,	56,
	/*340*/	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	28,	28,	28,	28,
	/*360*/	28,	56,	28,	28,	56,	56,	56,	28,	56,	28,	56,	56,	56,	56,	28,	28,	28,	28,	28,	56,
	/*380*/	56,	56,	28,	56,	56,	56,	56,	56,	56,	28,	56,	56,	56,	56,	56,	56,	56,	56,	56,	28,
	/*400*/	56,	56,	28,	28,	56,	56,	28,	56,	28,	56,	56,	56,	28,	56,	56,	28,	28,	28,	28,	28,
	/*420*/	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	56,	28,	56,	56,	56,	56,	56,	56,
	/*440*/	56,	56,	56,	56,	56,	56,	56,	28,	56,	56,	56,	56,	28,	28,	28,	28,	56,	56,	28,	28,
	/*460*/	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,
	/*480*/	28,	56,	56,	56,	56,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,
	/*500*/	28,	28,	28,	28,	28,	56,	56,	56,	56,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,
	/*520*/	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	56,	56,	56,	56,	56,	56,	56,	56,	56,
	/*540*/	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	28,	28,	28,	28,	28,	28,	28,	28,	28,
	/*560*/	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	56,	56,	56,	28,
	/*580*/	28,	56,	56,	28,	28,	56,	28,	56,	56,	56,	56,	56,	56,	56,	56,	28,	56,	56,	56,	56,
	/*600*/	56,	56,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	56,	56,	56,	56,
	/*620*/	56,	56,	56,	56,	56,	56,	56,	28,	28,	28,	28,	28,	28,	28,	28,	28,	56,	28,	56,	56,
	/*640*/	56,	56,	56,	28,	28,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	28,	28,	28,	56,	56,
	/*660*/	56,	28,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	28,	28,	56,	28,
	/*680*/	28,	28,	28,	28,	28,	28,	28,	28,	28,	56,	56,	28,	56,	56,	56,	56,	56,	56,	56,	56,
	/*700*/	56,	56,	56,	56,	28,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,
	/*720*/	28,	28,	56,	56,	56,	56,	56,	56,	56,	28,	56,	56,	56,	56,	56,	28,	56,	56,	56,	56,
	/*740*/	56,	56,	56,	56,	56,	56,	56,	56,	28,	28,	28,	28,	56,	28,	28,	56,	28,	28,	28,	56,
	/*760*/	28,	28,	56,	56,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	56,	56,	56,	28,	28,
	/*780*/	28,	28,	56,	28,	56,	56,	56,	56,	56,	56,	56,	28,	28,	28,	56,	56,	56,	56,	28,	56,
	/*800*/	56,	28,	28,	28,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,
	/*820*/	56,	56,	56,	28,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	28,	28,	28,	28,	28,	56,
	/*840*/	28,	28,	28,	56,	56,	28,	56,	56,	56,	56,	56,	28,	28,	56,	56,	56,	28,	56,	56,	56,
	/*860*/	56,	28,	28,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	28,
	/*880*/	56,	28,	28,	56,	56,	56,	56,	56,	56,	28,	28,	28,	56,	56,	56,	56,	28,	56,	28,	56,
	/*900*/	56,	56,	56,	56,	56,	28,	28,	28,	28,	56,	28,	56,	56,	56,	56,	56,	56,	56,	56,	28,
	/*920*/	28,	28,	28,	28,	28,	56,	56,	28,	28,	28,	28,	28,	28,	56,	28,	56,	56,	56,	28,	28,
	/*940*/	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,
	/*960*/	56,	56,	56,	56,	56,	28,	56,	28,	56,	28,	28,	28,	56,	56,	56,	56,	56,	56,	28,	56,
	/*980*/	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	28,	28,	28,	56,
	/*1000*/56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	28,	56,	28,	56,	56,	56,
	/*1020*/56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,
	/*1040*/56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,
	/*1060*/56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,
	/*1080*/56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,
	/*1100*/56,	56,	56,	56,	28,	28,	28,	28,	28,	28,	56,	56,	56,	56,	56,	56,	56,	28,	28,	56,
	/*1120*/56,	56,	56,	56,	56,	28,	28,	28,	28,	56,	28,	28,	56,	56,	56,	56,	56,	56,	56,	56,
	/*1140*/56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	28,	28,	56,	56,	28,	28,	28,	28,	28,	28,
	/*1160*/28,	28,	56,	56,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	56,	28,	28,	28,	28,	28,
	/*1180*/28,	56,	56,	56,	56,	28,	28,	28,	28,	28,	28,	56,	56,	56,	28,	28,	56,	28,	28,	28,
	/*1200*/28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	56,	56,	28,	28,	28,	28,	28,
	/*1220*/28,	56,	56,	28,	28,	28,	56,	28,	56,	56,	28,	56,	56,	56,	56,	56,	56,	56,	56,	56,
	/*1240*/56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	28,
	/*1260*/56,	56,	56,	28,	56,	28,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,
	/*1280*/56,	56,	56,	28,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,
	/*1300*/56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	28,	28,
	/*1320*/56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,
	/*1340*/56,	56,	56,	56,	56,	28,	56,	28,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,
	/*1360*/56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	28,	28,
	/*1380*/28,	56,	56,	56,	28,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,
	/*1400*/56,	28,	56,	56,	28,	56,	56,	56,	56,	56,	56,	56,	28,	56,	56,	56,	56,	56,	56,	56,
	/*1420*/56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	28,	28,	56,	56,	56,	56,	28,	28,	28,
	/*1440*/56,	56,	56,	56,	56,	56,	28,	56,	56,	56,	56,	28,	28,	56,	56,	56,	56,	28,	28,	56,
	/*1460*/56,	28,	56,	56,	28,	28,	56,	28,	56,	56,	56,	56,	28,	28,	28,	56,	56,	56,	56,	56,
	/*1480*/28,	28,	28,	28,	56,	56,	56,	28,	28,	28,	56,	56,	56,	56,	56,	28,	28,	28,	56,	56,
	/*1500*/56,	56,	56,	28,	28,	28,	28,	28,	28,	28,	28,	28,	56,	28,	28,	28,	28,	28,	28,	28,
	/*1520*/28,	56,	28,	28,	28,	28,	28,	56,	56,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,
	/*1540*/28,	28,	28,	28,	28,	28,	28,	56,	56,	56,	28,	56,	56,	56,	56,	56,	56,	28,	56,	56,
	/*1560*/28,	56,	56,	28,	56,	28,	56,	56,	56,	28,	56,	56,	56,	56,	56,	28,	56,	56,	56,	28,
	/*1580*/56,	56,	56,	28,	56,	28,	28,	56,	56,	28,	56,	56,	56,	56,	56,	56,	56,	56,	28,	56,
	/*1600*/56,	56,	56,	28,	28,	28,	28,	56,	56,	56,	56,	56,	28,	56,	56,	56,	56,	56,	56,	56,
	/*1620*/56,	56,	56,	56,	56,	56,	56,	28,	28,	28,	28,	56,	56,	28,	56,	56,	56,	56,	28,	28,
	/*1640*/56,	56,	28,	28,	28,	28,	28,	28,	28,	28,	56,	56,	56, 56,	28,	56,	56,	56,	56,	56,
	/*1660*/56,	56,	56,	56,	56,	56,	56,	28,	28,
};

// 00834178 
uchar ItemHeightTable[MAX_1780_ITEM_PICS] = {
	/* 0*/	0,	29,	32,	32,	32,	32,	32,	32,	32,	32,	32,	35,	28,	84,	84,	84,	28,	28,	28,	28,
	/*20*/	28,	28,	84,	28,	84,	28,	28,	84,	28,	28,	28,	84,	84,	84,	84,	84,	84,	84,	28,	84,
	/*40*/	28,	56,	28,	28,	84,	56,	28,	28,	28,	28,	28,	84,	84,	84,	84,	84,	28,	28,	28,	28,
	/*60*/	28,	84,	56,	56,	56,	56,	56,	56,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,
	/*80*/	84,	84,	84,	84,	84,	84,	84,	56,	56,	56,	56,	56,	28,	56,	56,	56,	56,	56,	56,	56,
	/*100*/	56,	56,	56,	56,	84,	56,	84,	56,	56,	56,	56,	56,	84,	84,	84,	84,	84,	84,	84,	84,
	/*120*/	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,
	/*140*/	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	56,	84,	84,	84,	84,	84,	84,	84,
	/*160*/	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,
	/*180*/	28,	84,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	56,	84,	28,	28,	28,	28,	28,	28,
	/*200*/	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	56,	56,	84,	84,	84,	84,	84,	84,	84,	84,
	/*220*/	84,	84,	84,	84,	84,	84,	84,	28,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,
	/*240*/	84,	84,	84,	56,	84,	84,	84,	84,	84,	56,	84,	84,	84,	84,	56,	84,	84,	84,	84,	56,
	/*260*/	56,	56,	84,	84,	84,	84,	84,	84,	28,	28,	28,	28,	28,	28,	28,	56,	84,	84,	84,	84,
	/*280*/	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,
	/*300*/	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	28,	28,	28,	28,	28,	28,	28,	56,	28,
	/*320*/	56,	28,	28,	28,	56,	56,	84,	84,	28,	84,	28,	28,	84,	84,	84,	84,	56,	28,	28,	56,
	/*340*/	56,	56,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	28,	28,	28,	28,
	/*360*/	28,	84,	28,	28,	84,	84,	84,	84,	56,	84,	84,	84,	84,	84,	28,	28,	28,	28,	84,	84,
	/*380*/	56,	56,	84,	84,	84,	84,	84,	84,	56,	28,	84,	84,	56,	56,	56,	56,	56,	56,	56,	84,
	/*400*/	84,	84,	84,	84,	84,	84,	84,	84,	84,	56,	84,	56,	84,	84,	84,	28,	84,	28,	28,	28,
	/*420*/	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	84,	28,	84,	84,	84,	84,	84,	84,
	/*440*/	84,	84,	84,	84,	84,	56,	56,	28,	56,	56,	84,	84,	28,	28,	28,	28,	84,	84,	28,	28,
	/*460*/	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,
	/*480*/	84,	84,	56,	56,	56,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,
	/*500*/	28,	28,	28,	28,	28,	56,	56,	56,	56,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,
	/*520*/	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	56,	56,	56,	56,	84,	84,	84,	84,	84,
	/*540*/	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	28,	28,	28,	28,	28,	28,	28,	28,	28,
	/*560*/	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	56,	84,	84,	28,
	/*580*/	28,	84,	84,	56,	28,	56,	28,	84,	84,	84,	84,	84,	84,	84,	84,	28,	84,	56,	84,	84,
	/*600*/	84,	84,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	84,	84,	84,	56,
	/*620*/	84,	84,	84,	84,	56,	56,	84,	28,	28,	28,	28,	28,	28,	28,	28,	28,	84,	84,	84,	84,
	/*640*/	84,	84,	84,	28,	28,	84,	56,	84,	84,	84,	84,	84,	84,	84,	84,	28,	28,	28,	84,	84,
	/*660*/	56,	28,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	28,	28,	84,	28,
	/*680*/	28,	28,	28,	28,	28,	28,	28,	28,	28,	56,	56,	84,	84,	84,	84,	84,	84,	56,	56,	84,
	/*700*/	56,	56,	84,	84,	84,	56,	84,	56,	84,	84,	84,	84,	84,	56,	84,	84,	84,	84,	84,	84,
	/*720*/	84,	84,	56,	56,	56,	56,	56,	56,	84,	84,	56,	56,	56,	84,	84,	28,	84,	84,	84,	56,
	/*740*/	56,	56,	56,	56,	56,	56,	56,	84,	84,	84,	84,	84,	84,	84,	84,	56,	56,	84,	84,	84,
	/*760*/	28,	28,	84,	84,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	84,	84,	84,	28,	28,
	/*780*/	84,	84,	56,	28,	56,	56,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	56,	28,	56,
	/*800*/	84,	28,	28,	84,	84,	84,	84,	56,	84,	56,	84,	84,	84,	56,	56,	84,	56,	56,	56,	56,
	/*820*/	84,	56,	56,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	28,	28,	28,	28,	84,	84,
	/*840*/	56,	28,	28,	56,	56,	28,	56,	84,	56,	56,	56,	56,	84,	56,	56,	56,	28,	84,	84,	56,
	/*860*/	84,	56,	56,	84,	84,	84,	56,	56,	56,	84,	84,	84,	84,	84,	84,	56,	56,	84,	84,	56,
	/*880*/	84,	28,	28,	84,	56,	56,	56,	56,	56,	84,	84,	56,	84,	84,	84,	84,	84,	84,	84,	84,
	/*900*/	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	56,	56,	56,	56,	28,
	/*920*/	28,	28,	28,	84,	84,	84,	84,	84,	56,	56,	84,	84,	84,	56,	28,	84,	84,	84,	84,	84,
	/*940*/	56,	56,	56,	56,	84,	84,	84,	84,	84,	84,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,
	/*960*/	56,	56,	84,	56,	84,	84,	84,	84,	84,	84,	84,	112,84,	84,	84,	56,	84,	84,	84,	84,
	/*980*/	84,	112,56,	84,	84,	84,	84,	84,	84,	84,	84,	56,	84,	84,	56,	56,	28,	28,	84,	84,
	/*1000*/84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	56,
	/*1020*/56,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,
	/*1040*/84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,
	/*1060*/84,	84,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	84,	84,	84,	84,	84,	84,	84,	84,
	/*1080*/84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	56,	56,	56,	56,	56,	56,	84,	84,	84,
	/*1100*/84,	84,	84,	84,	56,	56,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,
	/*1120*/84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	28,	28,	84,	84,	84,	84,	84,	84,	84,	84,
	/*1140*/84,	56,	84,	84,	84,	84,	84,	84,	56,	84,	28,	28,	84,	84,	28,	28,	28,	28,	28,	28,
	/*1160*/28,	28,	56,	84,	28,	28,	28,	28,	28,	28,	28,	28,	28,	84,	84,	28,	28,	28,	28,	28,
	/*1180*/28,	84,	84,	84,	56,	28,	28,	28,	28,	28,	28,	84,	84,	56,	28,	28,	84,	28,	28,	28,
	/*1200*/28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	28,	56,	56,	28,	28,	28,	28,	28,
	/*1220*/28,	84,	84,	28,	28,	28,	84,	28,	84,	84,	84,	84,	84,	84,	56,	56,	56,	84,	84,	84,
	/*1240*/84,	84,	84,	84,	56,	56,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	28,
	/*1260*/84,	56,	84,	28,	84,	28,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	56,	56,	56,	84,
	/*1280*/84,	84,	84,	84,	56,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,
	/*1300*/84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	28,	84,
	/*1320*/84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,
	/*1340*/84,	84,	84,	84,	84,	84,	56,	28,	84,	84,	84,	84,	56,	56,	56,	56,	84,	84,	84,	84,
	/*1360*/84,	56,	84,	84,	84,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	84,	56,	84,
	/*1380*/84,	84,	56,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	56,	84,	84,	56,	56,
	/*1400*/84,	28,	84,	84,	28,	84,	56,	56,	56,	56,	56,	56,	28,	56,	56,	56,	56,	56,	84,	84,
	/*1420*/84,	84,	84,	84,	84,	56,	56,	84,	84,	84,	84,	28,	28,	84,	84,	84,	84,	28,	28,	28,
	/*1440*/84,	84,	56,	56,	84,	84,	28,	84,	84,	84,	56,	28,	28,	84,	84,	84,	84,	28,	28,	84,
	/*1460*/56,	28,	56,	56,	28,	28,	84,	28,	84,	84,	84,	56,	28,	28,	28,	84,	84,	56,	84,	84,
	/*1480*/28,	28,	28,	28,	56,	84,	84,	28,	28,	28,	56,	84,	84,	84,	84,	28,	28,	28,	56,	84,
	/*1500*/56,	84,	84,	56,	56,	84,	56,	28,	84,	56,	56,	56,	84,	28,	56,	56,	56,	56,	56,	56,
	/*1520*/56,	56,	84,	84,	84,	84,	84,	84,	84,	56,	56,	56,	56,	56,	56,	56,	56,	56,	56,	28,
	/*1540*/28,	28,	84,	84,	84,	84,	84,	56,	56,	84,	84,	84, 84,	84,	84,	84,	84,	28,	84,	84,
	/*1560*/84,	84,	84,	84,	56,	56,	84,	84,	84,	28,	84,	84,	84,	84,	84,	28,	56,	84,	56,	84,
	/*1580*/84,	84,	84,	84,	84,	84,	84,	56,	84,	28,	84,	56,	56,	84,	84,	84,	84,	84,	84,	56,
	/*1600*/84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	56,	56,	56,	84,	84,	56,	56,	84,
	/*1620*/84,	56,	84,	84,	84,	84,	84,	28,	28,	28,	84,	84,	84,	84,	84,	84,	84,	84,	28,	28,
	/*1640*/84,	84,	84,	84,	84,	84,	84,	84,	84,	84,	56,	56,	56, 84,	28,	56,	56,	84,	84,	84,
	/*1660*/84,	56,	84,	84,	84,	56,	84,	28,	28,
};

// 00834EE8
// 1784 байт по факту выделено в th1 для этого массива
// В этой таблице индексы изображений и звучаний вещей на земле
uchar ItemFlipTable[MAX_1780_ITEM_PICS] = {
	/*0*/	 2,	3,	17,	3,	4,	4,	4,	12,	12,	12,	15,	12,	8,	12,	12,	3,	27,	21,	12,	3, 
	/*20*/	 11,7,	17,	6,	6,	1,	26,	7,	32,	5,	24,	30,	7,	5,	22,	25,	24,	20,	23,	7,
	/*40*/	 6,	17,	42,	17,	12,	12,	12,	12,	12,	17,	8,	8,	5,	8,	8,	8,	8,	8,	8,	6,
	/*60*/	 8,	8,	8,	6,	8,	8,	6,	8,	8,	6,	6,	6,	8,	8,	8,	5,	9,	13,	13,	13,
	/*80*/	 26,5,	5,	15,	5,	5,	18,	18,	18,	5,	5,	31,	14,	5,	42,	13,	37,	5,	5,	5,
	/*100*/	 7,	1,	3,	17,	1,	15,	10,	14,	3,	11,	8,	0,	1,	7,	0,	7,	7,	7,	3,	3,
	/*120*/	 3,	6,	6,	11,	11,	11,	7,	14,	14,	42,	6,	6,	7,	6,	8,	14,	0,	42,	42,	14,
	/*140*/	 33,1,	1,	1,	1,	1,	7,	7,	7,	42,	42,	17,	17,	17,	0,	34,	1,	0,	3,	17,
	/*160*/	 8,	8,	6,	1,	3,	3,	11,	7,	12,	6,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,
	/*180*/	 5,	1,	12,	12,	12,	12,	12,	38,	6,	3,	0,	3,	3,	17,	8,	8,	8,	42,	5,	5,
	/*200*/	 8,	3,	8,	14,	0,	6,	8,	7,	14,	3,	3,	1,	6,	6,	17,	38,	8,	6,	6,	3,
	/*220*/	 6,	8,	1,	6,	6,	17,	3,	8,	17,	8,	8,	5,	1,	8,	8,	8,	17,	5,	0,	11,
	/*240*/	 14,0,	5,	1,	14,	6,	0,	5,	5,	5,	0,	17,	1,	1,	7,	8,	21,	38,	32,	32,
	/*260*/	 32,32,	32,	31,	8,	8,	8,	11,	17,	17,	42,	14,	7,	3,	7,	17,	3,	6,	7,	17,
	/*280*/	 0,	8,	6,	3,	3,	17,	0,	11,	42,	42,	3,	41,	36,	36,	11,	11,	3,	1,	0,	12,
	/*300*/	 12,12,	12,	12,	12,	12,	5,	12,	42,	12,	12,	12,	5,	5,	1,	1,	12,	17,	12,	12,
	/*320*/	 3,	8,	6,	7,	13,	12,	12,	13,	5,	5,	6,	0,	0,	42,	14,	0,	17,	17,	17,	3,
	/*340*/	 3,	3,	3,	6,	32,	32,	32,	32,	32,	11,	32,	32,	8,	6,	17,	6,	5,	8,	36,	17,
	/*360*/	 14,8,	2,	2,	24,	24,	8,	7,	15,	5,	8,	8,	6,	6,	0,	42,	5,	32,	0,	14,
	/*380*/	 5,	5,	5,	5,	5,	13,	13,	11,	11,	11,	11,	11,	8,	11,	11,	6,	8,	5,	17,	5,
	/*400*/	 8,	6,	6,	32,	8,	32,	32,	32,	32,	32,	2,	21,	2,	21,	21,	21,	21,	21,	21,	21,
	/*420*/	 42,21,	17,	17,	1,	1,	1,	1,	36,	0,	0,	0,	0,	18,	18,	12,	5,	5,	7,	28,
	/*440*/	 24,24,	24,	21,	7,	6,	32,	32,	32,	32,	32,	32,	32,	32,	32,	32,	32,	32,	32,	32,
	/*460*/	 32,32,	32,	32,	32,	32,	32,	32,	6,	7,	13,	13,	13,	26,	26,	21,	22,	22,	25,	2,
	/*480*/	 2,	2,	23,	20,	20,	12,	12,	12,	12,	12,	12,	12,	18,	40,	40,	40,	40,	29,	29,	29,
	/*500*/	 29,29,	29,	29,	39,	37,	37,	37,	37,	16,	16,	16,	16,	16,	16,	16,	12,	12,	12,	42,
	/*520*/	 42,42,	5,	17,	14,	14,	1,	1,	6,	11,	36,	11,	11,	11,	11,	7,	7,	8,	8,	32,
	/*540*/	 32,32,	32,	32,	32,	32,	32,	32,	32,	32,	32,	32,	32,	32,	32,	32,	2,	22,	21,	12,
	/*560*/	 12,21,	21,	21,	13,	0,	0,	21,	2,	17,	17,	2,	12,	5,	21,	14,	14,	14,	14,	17,
	/*580*/	 17,42,	17,	21,	17,	15,	1,	0,	11,	0,	24,	2,	2,	2,	2,	2,	2,	2,	32,	32,
	/*600*/	 32,32,	32,	32,	8,	8,	8,	5,	1,	3,	17,	17,	5,	5,	6,	22,	24,	23,	25,	20,
	/*620*/	 2,	21,	26,	2,	17,	8,	17,	17,	17,	17,	17,	32,	32,	17,	5,	17,	17,	17,	17,	17,
	/*640*/	 7,	0,	1,	32,	32,	32,	0,	6,	37,	38,	7,	7,	7,	7,	7,	7,	7,	7,	3,	7,
	/*660*/	 42,42,	3,	3,	24,	24,	0,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	5,	5,	8,
	/*680*/	 1,	1,	3,	6,	7,	5,	5,	17,	5,	5,	0,	6,	6,	5,	7,	15,	7,	7,	7,	7,
	/*700*/	 7,	15,	17,	1,	7,	7,	1,	6,	6,	8,	5,	5,	5,	5,	5,	5,	6,	6,	15,	15,
	/*720*/	 15,7,	1,	12,	17,	17,	3,	5,	5,	5,	5,	5,	13,	13,	5,	7,	11,	11,	36,	36,
	/*740*/	 36,11,	11,	7,	36,	11,	11,	7,	2,	12,	0,	0,	12,	12,	12,	12,	12,	12,	12,	12,
	/*760*/	 12,12,	12,	7,	7,	7,	12,	12,	8,	8,	5,	12,	5,	5,	3,	3,	3,	3,	3,	11,
	/*780*/	 11,11,	1,	7,	7,	5,	12,	15,	1,	12,	12,	8,	0,	0,	3,	5,	42,	5,	17,	17,
	/*800*/	 1,	15,	15,	0,	31,	13,	5,	5,	6,	5,	5,	11,	17,	0,	0,	17,	17,	17,	17,	17,
	/*820*/	 17,17,	23,	22,	26,	21,	6,	6,	8,	12,	12,	5,	5,	12,	5,	7,	5,	5,	5,	8,
	/*840*/	 6,	5,	15,	5,	12,	0,	1,	31,	6,	36,	36,	6,	7,	3,	15,	15,	15,	17,	3,	3,
	/*860*/	 6,	6,	3,	5,	5,	6,	3,	36,	42,	12,	12,	1,	13,	13,	13,	13,	13,	6,	6,	0,
	/*880*/	 3,	3,	3,	17,	8,	17,	8,	1,	6,	17,	1,	1,	1,	6,	6,	6,	6,	6,	6,	6,
	/*900*/	 3,	3,	3,	5,	5,	5,	5,	12,	12,	12,	12,	8,	8,	8,	8,	8,	8,	6,	6,	6,
	/*920*/	 6,	5,	12,	7,	6,	17,	8,	8,	5,	5,	5,	5,	1,	1,	1,	6,	0,	0,	5,	5,
	/*940*/	 0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	17,	0,	1,	8,	3,	8,	8,	8,	8,	8,
	/*960*/	 0,	3,	3,	13,	0,	0,	8,	0,	1,	7,	15,	11,	11,	11,	11,	11,	11,	17,	17,	5,
	/*980*/	 17,3,	5,	37,	12,	12,	8,	8,	1,	7,	11,	6,	17,	17,	17,	17,	17,	17,	17,	17,
	/*1000*/ 11,11,	11,	11,	11,	17,	8,	5,	5,	14,	14,	0,	17,	14,	14,	0,	0,	17,	17,	42,
	/*1020*/ 42,42,	42,	42,	42,	14,	14,	14,	14,	14,	14,	14,	17,	17,	14,	17,	17,	0,	17,	17,
	/*1040*/ 17,14,	14,	14,	14,	14,	14,	17,	17,	17,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,
	/*1060*/ 17,42,	42,	42,	42,	42,	42,	42,	42,	42,	42,	14,	14,	14,	14,	14,	14,	17,	17,	5,
	/*1080*/ 5,	5,	5,	5,	5,	3,	3,	3,	3,	3,	3,	3,	8,	8,	8,	8,	8,	8,	11,	3,
	/*1100*/ 7,	11,	0,	0,	17,	8,	8,	11,	11,	11,	11,	11,	11,	8,	8,	8,	8,	6,	12,	12,
	/*1120*/ 0,	7,	17,	8,	8,	17,	8,	8,	0,	5,	17,	17,	11,	17,	17,	17,	5,	0,	12,	12,
	/*1140*/ 7,	8,	12,	12,	12,	12,	12,	12,	12,	12,	15,	11,	12,	12,	12,	12,	30,	12,	12,	12,
	/*1160*/ 12,8,	42,	12,	12,	12,	12,	12,	12,	42,	42,	1,	5,	12,	12,	12,	12,	12,	12,	42,
	/*1180*/ 42,5,	12,	12,	7,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,
	/*1200*/ 12,31,	15,	12,	12,	12,	12,	12,	12,	42,	6,	12,	12,	12,	17,	12,	6,	6,	6,	17,
	/*1220*/ 0,	17,	5,	5,	15,	0,	6,	17,	17,	6,	7,	7,	5,	5,	17,	6,	6,	7,	17,	17,
	/*1240*/ 0,	6,	6,	6,	14,	17,	1,	12,	8,	8,	1,	12,	6,	12,	14,	17,	8,	1,	1,	6,
	/*1260*/ 6,	14,	17,	17,	5,	5,	5,	7,	3,	8,	1,	11,	5,	1,	7,	7,	11,	11,	14,	42,
	/*1280*/ 42,42,	42,	42,	42,	42,	42,	42,	14,	42,	42,	42,	42,	42,	42,	42,	42,	42,	42,	11,
	/*1300*/ 42,3,	3,	8,	42,	42,	32,	6,	42,	6,	6,	6,	6,	6,	6,	6,	14,	3,	17,	8,
	/*1320*/ 8,	8,	8,	8,	8,	8,	8,	8,	17,	17,	17,	1,	0,	8,	5,	12,	8,	1,	1,	1,
	/*1340*/ 5,	5,	5,	13,	3,	0,	3,	1,	1,	5,	6,	1,	6,	5,	5,	5,	5,	5,	5,	5,
	/*1360*/ 5,	5,	5,	5,	5,	8,	8,	8,	8,	3,	5,	8,	8,	6,	8,	42,	14,	14,	1,	8,
	/*1380*/ 8,	17,	17,	5,	17,	17,	5,	5,	17,	12,	7,	6,	12,	8,	13,	5,	5,	5,	5,	5,
	/*1400*/ 12,5,	5,	13,	5,	13,	6,	6,	6,	6,	6,	11,	6,	5,	5,	8,	8,	17,	8,	12,
	/*1420*/ 12,11,	14,	42,	17,	12,	12,	12,	7,	17,	5,	5,	8,	6,	12,	17,	6,	6,	5,	12,
	/*1440*/ 12,8,	8,	17,	11,	12,	12,	6,	5,	12,	7,	5,	12,	12,	17,	12,	3,	1,	17,	5,
	/*1460*/ 12,12,	12,	17,	6,	5,	7,	8,	12,	12,	12,	12,	5,	17,	3,	12,	12,	12,	5,	17,
	/*1480*/ 11,6,	8,	12,	12,	12,	5,	7,	5,	17,	17,	8,	8,	6,	8,	27,	8,	8,	8,	8,
	/*1500*/ 3,	12,	8,	8,	8,	8,	8,	8,	8,	13,	6,	6,	6,	6,	6,	6,	7,	8,	8,	8,
	/*1520*/ 8,	8,	8,	8,	8,	8,	8,	12,	12,	12,	8,	8,	8,	8,	6,	5,	5,	3,	8,	15,
	/*1540*/ 11,11,	11,	11,	11,	12,	1,	7,	8,	0,	8,	8,	15,	8,	42,	42,	0,	12,	1,	3,
	/*1560*/ 7,	7,	7,	12,	5,	0,	42,	6,	0,	8,	14,	6,	6,	6,	8,	5,	1,	30,	11,	15,
	/*1580*/ 15,42,	17,	17,	17,	17,	6,	5,	17,	0,	7,	8,	8,	8,	8,	7,	7,	7,	7,	17,
	/*1600*/ 8,	5,	5,	17,	6,	5,	40,	6,	3,	5,	0,	17,	0,	0, 17, 12, 12, 12,	8,	3,
	/*1620*/ 7, 8,	3,	7,	3,	8,	12,	12,	3,	17, 11,	11,	11,	11,	11,	11,	11,	11,	15,	5,
	/*1640*/ 5,	6,	12,	31,	5,	0,	42,	0,	0,	5,	17,	6,	8,	5,	0,	12,	12,
};

uchar MonsterSoundSuffix[4] = { 'a'/*attack*/, 'h'/*hit*/, 'd'/*die*/, 's'/*special*/ };

// Координаты левого НИЖНЕГО угла клетки слота
ItemCell ItemCells[117] = {
	{452,  31},// 0		IS_0_Head
	{480,  31},// 1		
	{452,  59},// 2		
	{480,  59},// 3		

	{365, 205},// 4		IS_1_LeftRing

	{567, 205},// 5		IS_2_RightRing

	{524,  59},// 6		IS_3_Neck

	{337, 104},// 7		IS_4_LeftHand
	{366, 104},// 8		
	{337, 132},// 9		
	{366, 132},// 10	
	{337, 160},// 11	
	{366, 160},// 12	

	{567, 104},// 13	IS_5_RightHand
	{596, 104},// 14	
	{567, 132},// 15	
	{596, 132},// 16	
	{567, 160},// 17	
	{596, 160},// 18	

	{452, 104},// 19	IS_6_Torso
	{480, 104},// 20	
	{452, 132},// 21	
	{480, 132},// 22	
	{452, 160},// 23	
	{480, 160},// 24	
	#ifndef TH1
	{ 0, 0 },  // 25	IS_7_Waist
	{ 0, 0 },  // 26
	
	{ 0, 0 },  // 27	IS_8_Hands
	{ 0, 0 },  // 28
	{ 0, 0 },  // 29
	{ 0, 0 },  // 30

	{ 0, 0 },  // 31	IS_9_Feet
	{ 0, 0 },  // 32
	{ 0, 0 },  // 33
	{ 0, 0 },  // 34
	#endif
	{337, 250},// 35 25	IS_10_7_Inventory
	{366, 250},// 36 26	
	{394, 250},// 37 27	
	{423, 250},// 38 28	
	{451, 250},// 39 29	
	{480, 250},// 40 30	
	{509, 250},// 41 31	
	{538, 250},// 42 32	
	{567, 250},// 43 33	
	{596, 250},// 44 34	

	{337, 279},// 45 35	
	{366, 279},// 46 36	
	{394, 279},// 47 37	
	{423, 279},// 48 38	
	{451, 279},// 49 39	
	{480, 279},// 50 40	
	{509, 279},// 51 41	
	{538, 279},// 52 42	
	{567, 279},// 53 43	
	{596, 279},// 54 44	

	{337, 308},// 55 45	
	{366, 308},// 56 46	
	{394, 308},// 57 47	
	{423, 308},// 58 48	
	{451, 308},// 59 49	
	{480, 308},// 60 50	
	{509, 308},// 61 51	
	{538, 308},// 62 52	
	{567, 308},// 63 53	
	{596, 308},// 64 54	

	{337, 336},// 65 55	
	{366, 336},// 66 56	
	{394, 336},// 67 57	
	{423, 336},// 68 58	
	{451, 336},// 69 59	
	{480, 336},// 70 60	
	{509, 336},// 71 61	
	{538, 336},// 72 62	
	{567, 336},// 73 63	
	{596, 336},// 74 64	

	{205, 385},// 75 65	IS_11_8_Belt
	{234, 385},// 76 66	
	{263, 385},// 77 67	
	{292, 385},// 78 68	
	{321, 385},// 79 69	
	{350, 385},// 80 70	
	{379, 385},// 81 71	
	{408, 385},// 82 72	
};

double _1_2 = 1.2;		// ...
double _0_8 = 8.0e-1;		// ...
double _15_0 = 1.5e1;		// ...
double _8_0 = 8.0;		// ...
double _m_0_5 = -5.0e-1;		// ...
double _0_0078125 = 7.8125e-3;		// ...
double _0_0 = 0.0;		// ...
double _0_5 = 5.0e-1;		// ...

double _0_01 =  1.0e-2;// 004900B8
double _m_1 = -1.0;	// 004900C0
//  Orientation       0     1       2     3     4     5      6      7       
//                  Down DownLeft Left UpLeft  Up  UpRight Right DownRight  
int RowDelta_[8]	= { 1, 0,-1,-1,-1, 0, 1, 1 }; // 004900C8
int ColDelta_[8]	= { 1, 1, 1, 0,-1,-1,-1, 0 }; // 004900E8

int RowDelta__[8]	= { 1, 0,-1,-1,-1, 0, 1, 1 }; // 004B3740
int ColDelta__[8]	= { 1, 1, 1, 0,-1,-1,-1, 0 }; // 004B3760

int RowDelta[9]		= { 1, 0,-1,-1,-1, 0, 1, 1, 0 }; // 004ABE88
int ColDelta[9]		= { 1, 1, 1, 0,-1,-1,-1, 0, 0 }; // 004ABEA8

int RowDeltaFB[ 9 ] = { 0, 0, 0, 1, 1, 1,-1,-1,-1 };
int ColDeltaFB[ 9 ] = { 0, 1,-1, 0,-1, 1, 0, 1,-1 };

int YArrayForRND[8] = {-1, 0, 1,-1, 1,-1, 0, 1 };
int XArrayForRND[8] = {-1,-1,-1, 0, 0, 1, 1, 1 };

char MapDeltaRangeRow[8] = { 0,-1, 0,-1,-2,-1,-2, 0 };
char MapDeltaRangeCol[8] = { 0, 0,-1,-1,-1,-2,-2, 0 };

int AddPlrXPosArray[10] = { 0, 1, 0, 1, 2, 0, 1, 2, 2, 0 };
int AddPlrYPosArray[10] = { 0, 0, 1, 1, 0, 2, 2, 1, 2, 0 };

int PlayerXPosArray[10] = { -22, -27, -21, -26, 1, 0, 1, 2, 1, 0 };
int PlayerYPosArray[10] = { -19, -19, -19, -19, 1, 1, 0, 1, 2, 0 };
// 00490108
char StepOrientation[9] = { 
	0, 5, 3,
	7, 1, 4,
	6, 0, 2,
};
// 00490114
char MonsterMissiles[4] = { MI_52_CHARGED_BOLT, MI_24_ARCANE_STAR, MI_7_LIGHTNING, MI_6_FIREBLAST };
double _0_01_OnePercent = 1.0e-2; // 00490118
int ConstDword3Array[3] = { 3, 1, 4 };
int ConstDword_49012C = 0;
// 00490170
char* ShrineNamesPtr[34] = {
	"Mysterious",	// 0
	"Hidden",		// 1
	"Gloomy",		// 2
	"Weird",		// 3
	"Magical",		// 4
	"Stone",		// 5
	"Religious",	// 6
	"Enchanted",	// 7
	"Thaumaturgic",	// 8
	"Fascinating",	// 9
	"Cryptic",		// 10
	"Magical",		// 11
	"Eldritch",		// 12
	"Eerie",		// 13
	"Divine",		// 14
	"",				// 15 // "Holy"
	"Sacred",		// 16
	"Spiritual",	// 17
	"Spooky",		// 18
	"Abandoned",	// 19
	"Creepy",		// 20
	"Quiet",		// 21
	"Secluded",		// 22
	"Ornate",		// 23
	"Glimmering",	// 24
	"Tainted",		// 25
	"Oily",			// 26
	"Glowing",		// 27
	"Mendicant's",	// 28
	"Sparkling",	// 29
	"Town",			// 30
	"Shimmering",	// 31
	"Solar",		// 32
	"Murphy's",		// 33
};
char MinShrineDungeonLevels[34] = {// 004901F8
	1,	// SH_0_Mysterious
	1,	// SH_1_Hidden
	1,	// SH_2_Gloomy
	1,	// SH_3_Weird
	1,	// SH_4_Magical
	1,	// SH_5_Stone
	1,	// SH_6_Religious
	16,	// SH_7_Enchanted
	1,	// SH_8_Thaumaturgic
	16,	// SH_9_Fascinating
	1,	// SH_10_Cryptic
	1,	// SH_11_Magical
	1,	// SH_12_Eldritch
	1,	// SH_13_Eerie
	1,	// SH_14_Divine
	1,	// SH_15_Holy
	16,	// SH_16_Sacred
	1,	// SH_17_Spiritual
	1,	// SH_18_Spooky
	1,	// SH_19_Abandoned
	1,	// SH_20_Creepy
	1,	// SH_21_Quiet
	16,	// SH_22_Secluded
	16,	// SH_23_Ornate
	1,	// SH_24_Glimmering
	21,	// SH_25_Tainted
	1,	// SH_26_Oily
	1,	// SH_27_Glowing
	1,	// SH_28_Mendicant_s
	1,	// SH_29_Sparkling
	2,	// SH_30_Town
	1,	// SH_31_Shimmering
	1,	// SH_32_Solar
	1,	// SH_33_Murphy_s
};
char MaxShrineDungeonLevels[34] = {// 00490220
	24,	// SH_0_Mysterious
	24,	// SH_1_Hidden
	24,	// SH_2_Gloomy
	24,	// SH_3_Weird
	24,	// SH_4_Magical
	24,	// SH_5_Stone
	24,	// SH_6_Religious
	16,	// SH_7_Enchanted
	24,	// SH_8_Thaumaturgic
	16,	// SH_9_Fascinating
	24,	// SH_10_Cryptic
	24,	// SH_11_Magical
	24,	// SH_12_Eldritch
	24,	// SH_13_Eerie
	24,	// SH_14_Divine
	24,	// SH_15_Holy
	16,	// SH_16_Sacred
	24,	// SH_17_Spiritual
	24,	// SH_18_Spooky
	24,	// SH_19_Abandoned
	24,	// SH_20_Creepy
	24,	// SH_21_Quiet
	16,	// SH_22_Secluded
	16,	// SH_23_Ornate
	24,	// SH_24_Glimmering
	24,	// SH_25_Tainted
	24,	// SH_26_Oily
	3,	// SH_27_Glowing
	24,	// SH_28_Mendicant_s
	24,	// SH_29_Sparkling
	14,	// SH_30_Town
	24,	// SH_31_Shimmering
	24,	// SH_32_Solar
	24,	// SH_33_Murphy_s
};

// 1 - только в single, 2 - только в multi
char ShrineAppearsMode[34] = {// 00490248
	0,	// SH_0_Mysterious
	0,	// SH_1_Hidden
	0,	// SH_2_Gloomy
	0,	// SH_3_Weird
	0,	// SH_4_Magical
	0,	// SH_5_Stone
	0,	// SH_6_Religious
	0,	// SH_7_Enchanted
	1,	// SH_8_Thaumaturgic
	0,	// SH_9_Fascinating
	0,	// SH_10_Cryptic
	0,	// SH_11_Magical
	0,	// SH_12_Eldritch
	0,	// SH_13_Eerie
	0,	// SH_14_Divine
	0,	// SH_15_Holy
	0,	// SH_16_Sacred
	0,	// SH_17_Spiritual
	2,	// SH_18_Spooky
	0,	// SH_19_Abandoned
	0,	// SH_20_Creepy
	0,	// SH_21_Quiet
	0,	// SH_22_Secluded
	0,	// SH_23_Ornate
	0,	// SH_24_Glimmering
	2,	// SH_25_Tainted
	0,	// SH_26_Oily
	1,	// SH_27_Glowing
	1,	// SH_28_Mendicant_s
	0,	// SH_29_Sparkling
	0,	// SH_30_Town
	0,	// SH_31_Shimmering
	1,	// SH_32_Solar
	0,	// SH_33_Murphy_s
};

// 0x00A35460
char* BookNamePtrTable[] = {
	"The Great Conflict",  
	"The Wages of Sin are War",  
	"The Tale of the Horadrim",  
	"The Dark Exile", 	
	"The Sin War",  
	"The Binding of the Three",  
	"The Realms Beyond",  
	"Tale of the Three",  
	"The Black King",  
	"Journal: The Ensorcellment",  
	"A Spellbook",  
	"Horazon's Tome",  
	"Horazon's Tome",  
	"Horazon's Tome",  
	"Book of Sealing",  
	"Horazon's Journal",
	"Book of Sealing",
	"Horazon's Journal",
	"Horazon's Journal",
	"Horazon's Journal",
	"Horazon's Journal",
	"Horazon's Journal",
	"Horazon's Journal",
	"Cryptic Tome",
	0
};

int QuestBooksSpeachs[9] = {
	SP_249, SP_250, SP_251, 
	SP_252, SP_253, SP_254, 
	SP_255, SP_256, SP_257};
char SpellIconIndexes[52] = {// 1.146
	27,	1,	2,	3,	4,	5,	6,	7,	8,	9,	
	24,	13,	12,	18,	16,	14,	45,	11,	51,	49,	
	15,	21,	34,	20,	35,	22,	26,	29,	37,	38,	
	39,	42,	30,	40,	10,	36,	30,	23,	19,	25,	
	46,	47,	43,	28,	48,	49,	41,	25,	35,	35,	
	35,	43
};
ButtonStruct ButtonsTable[8] = {
	{9,	361, 71, 19, 1},// 0	CHAR
	{9,	387, 71, 19, 0},// 1	QUEST
	{9,	427, 71, 19, 1},// 2	MAP
	{9,	453, 71, 19, 0},// 3	MENU
	{560,	361, 71, 19, 1},// 4	INV
	{560,	387, 71, 19, 0},// 5	SPELLBOOK
	{87,	443, 33, 32, 1},// 6	SendMessage
	{527,	443, 33, 32, 1},// 7	PlayerAttack
};

char* HotKeyNamePtrs[8] = { 
	"'c'", 
	0, 
	"Tab", 
	"Esc", 
	"'i'", 
	0, 
	"Enter", 
	0 
};

char* ButtonNamePtrs[8] = {	
	"Character Stats",	
	"Quest Info", 
	"AutoMap", 
	"Main Menu", 
	"Inventory", 
	"Magic book", 
	"Send Message", 
	"Player Attack" 
};
StatUpButton StatUpButtons[4] = {
	{137, 138, 41, 22},
	{137, 166, 41, 22},
	{137, 195, 41, 22},
	{137, 223, 41, 22},
};

int UseReservedSystemPalette = 1;
int IsPlayerFriendly = 1; // 0049535C

char* NetMsgTable[4] = { // 00495360
	"I need help! Heal me!",	
	"Go through that door first.",
	"Give me some gold please.",
	"Look out behind you!",
};

// HANDLE hHandle
HANDLE hHandle = (HANDLE)0xFFFFFFFF;		// ...

// 00A09960
char* OnScreenMessages[100] = {
/* 0	*/	"", // OnScreenMessageIndex == 0, значит нет сообщения, не рисуется
/* 1	*/	"No automap available in town",
/* 2	*/	"Not until the area is cleared...",
/* 3	*/	"Direct Sound Creation Failed",
/* 4	*/	"Not until the battle is over...",
/* 5	*/	"Not enough space to save",
/* 6	*/	"No Pause in town",
/* 7	*/	"Copying to a hard disk is recommended",
/* 8	*/	"Multiplayer sync problem",
/* 9	*/	"No pause in multiplayer",
/* 10	*/	"Loading...",
/* 11	*/	"Saving...",
/* 12	*/	"One can learn only by making mistakes",
/* 13	*/	"New strength is forged through destruction",
/* 14	*/	"Those who defend seldom attack",
/* 15	*/	"The sword of justice is swift and sharp",
/* 16	*/	"While the spirit is vigilant the body thrives",
/* 17	*/	"The powers of mana refocused renews",
/* 18	*/	"Time cannot diminish the power of steel",
/* 19	*/	"Magic is not always what it seems to be",
/* 20	*/	"What once was opened now is closed",
/* 21	*/	"Intensity comes at the cost of wisdom",
/* 22	*/	"Arcane power brings destruction",
/* 23	*/	"That which cannot be held cannot be harmed",
/* 24	*/	"Bright and Dark become as the sky",
/* 25	*/	"Wisdom may come at the cost of self",
/* 26	*/	"Drink and be refreshed",
/* 27	*/	"Magical damage cannot harm you",
/* 28	*/	"Energy comes at the cost of wisdom",
/* 29	*/	"Riches abound when least expected",
/* 30	*/	"Where avarice fails, patience gains reward",
/* 31	*/	"Blessed by a benevolent companion!",
/* 32	*/	"The hands of men may be guided by fate",
/* 33	*/	"Strength may be bolstered by faith",
/* 34	*/	"Power may come from knowing yourself",
/* 35	*/	"The way is made clear when viewed from above",
/* 36	*/	"Salvation comes at the cost of wisdom",
/* 37	*/	"Mysteries are revealed in the light of reason",
/* 38	*/	"Let the chips fall where they may",
/* 39	*/	"No good deed ever goes unpunished",
/* 40	*/	"You must be at least level 8 to go there",
/* 41	*/	"You must be at least level 13 to go there",
/* 42	*/	"You must be at least level 17 to go there",
/* 43	*/	"Arcane knowledge gained!",
/* 44	*/	"That which does not kill you...",
/* 45	*/	"Wisdom comes at the cost of experience",
/* 46	*/	"Give and you shall receive.",
/* 47	*/	"Some experience is gained by touch.",
/* 48	*/	"There's no place like home.",
/* 49	*/	"Spiritual energy is restored",
/* 50	*/	"You feel more agile.",
/* 51	*/	"You feel stronger.",
/* 52	*/	"You feel wiser.",
/* 53	*/	"You feel refreshed.",
/* 54	*/	"That which can break will.",
/* 55	*/	"You must be at least level 19 to go there",
/* 56	*/	"You must be at least level 20 to go there",
/* 57	*/	"You must be at least level 26 to go there",
/* 58	*/	"You must be at least level 28 to go there",
/* 59	*/	"You must be at least level 30 to go there",
/* 60	*/	"You must be at least level 32 to go there",
/* 61	*/	"You must be at least level 34 to go there",
/* 62	*/	"You must be at least level 41 to go there",
/* 63	*/	"You must be at least level 42 to go there",
/* 64	*/	"You must be at least level 43 to go there",
/* 65	*/	"You must be at least level 44 to go there",
/* 66	*/	"You must be at least level 45 to go there",
/* 67	*/	"Not before you talk to Tremain", // fleshdoom patch (4) did
/* 68   */  "On Nightmare it's impossible to go up in levels!",
/* 69	*/  "Drink and gain more power.",
/* 70	*/  "You can't go up in Ironman mode!",
/* 71	*/  "Ironman rules oblige to clear the level first.",
/* 72	*/  "Level cleared. You can save & quit.",
};

int IsFastWalkEnabled = 0;
char* MusicMenu[2] = { "Music", "Music Disabled" };
char* SoundMenu[2] = { "Sound", "Sound Disabled" };
char* WalkMenu[2] =	{ "Jog",	"Walk"};
char aFastWalk[]	= "Fast Walk";    
char* FastWalkPtr = aFastWalk;	

int MaxGoldInCell = 50000;		// ...
// 004A5628
int OilsQuality[10] = { 1, 10, 1, 10, 4, 1, 5, 17, 1, 10 };
// 004A5650
int OilPrice[10] = {500, 2500, 500, 2500, 1500, 100, 2500, 15000, 500, 2500};
// 004A5678
int OilsMagicCode[10] = {
	MC_31_OIL_OF_REPAIR_I,
	MC_32_OIL_OF_REPAIR_II,
	MC_33_OIL_OF_REPAIR_III,
	MC_34_OIL_OF_REPAIR_IV,
	MC_35_OIL_OF_REPAIR_V,
	MC_36_BLACKSMITH_OIL,
	MC_37_OIL_OF_FORTITUDE,
	MC_38_OIL_OF_REPAIR_VI,
	MC_39_OIL_OF_REPAIR_VII,
	MC_40_OIL_OF_HANDENING
};

// char *UniqueItemNameTable[FLIP_ITEM_COUNT]
char* Flip_FileName[FL_52_COUNT] = { // 004A5888
	"Armor2",   // FL_0_ARMOR2   
	"Axe",      // FL_1_AXE      
	"FBttle",   // FL_2_FBTTLE   
	"Bow",      // FL_3_BOW      
	"GoldFlip", // FL_4_GOLDFLIP 
	"Helmut",   // FL_5_HELMUT   
	"Mace",     // FL_6_MACE     
	"Shield",   // FL_7_SHIELD   
	"SwrdFlip", // FL_8_SWRDFLIP 
	"Rock",     // FL_9_ROCK     
	"Cleaver",  // FL_10_CLEAVER 
	"Staff",    // FL_11_STAFF   
	"Ring",	    // FL_12_RING    
	"CrownF",   // FL_13_CROWNF  
	"LArmor",   // FL_14_LARMOR  
	"WShield",  // FL_15_WSHIELD 
	"Scroll",   // FL_16_SCROLL  
	"FPlateAr", // FL_17_FPLATEAR
	"FBook",    // FL_18_FBOOK   
	"Food",     // FL_19_FOOD    
	"FBttleBB", // FL_20_FBTTLEBB
	"FBttleDY", // FL_21_FBTTLEDY
	"FBttleOR", // FL_22_FBTTLEOR
	"FBttleBR", // FL_23_FBTTLEBR
	"FBttleBL", // FL_24_FBTTLEBL
	"FBttleBY", // FL_25_FBTTLEBY
	"FBttleWH", // FL_26_FBTTLEWH
	"FBttleDB", // FL_27_FBTTLEDB
	"innsign",  // FL_28_INNSIGN 
	"FBrain",   // FL_29_FBRAIN  
	"LOB",      // FL_30_LOB     
	"Cp",       // FL_31_CP      
	"Bldstn",   // FL_32_BLDSTN  
	"Fanvil",   // FL_33_FANVIL  
	"FLazStaf", // FL_34_FLAZSTAF
	"bombs1",   // FL_35_BOMBS1  
	"wand",     // FL_36_WAND    
	"wholeps1", // FL_37_WHOLEPS1
	"runes1",   // FL_38_RUNES1  
	"teddys1",  // FL_39_TEDDYS1 
	"cowz1",    // FL_40_COWZ1   
	"lazstaf",  // FL_41_LAZSTAF 
	"cloth",    // FL_42_CLOTH   
	"FMush",	// FL_43_MUSHROOM
	#ifndef TH1
	"Belt",     // FL_44_BELT     
	"Gloves",   // FL_45_GLOVES   
	"CGloves",  // FL_46_CGLOVES  
	"MGloves",  // FL_47_MGLOVES  
	"Boots",    // FL_48_BOOTS    
	"CBoots",   // FL_49_CBOOTS   
	"MBoots",   // FL_50_MBOOTS   
	"Mace",		// FL_51_MAUL
	#endif
};

char Flip_FramesCount[FL_52_COUNT] = {
	15,	13, 16, 13, 10, 13, 13, 13, 13,	10, 13, 13, 13, 13, 13, 13, 13, 13, 13// 0 // ...
	, 1, 16, 16, 16, 16, 16, 16, 16, 16, 13, 12, 12, 13, 13, 13, 8, 10// 19
	, 16, 16, 10, 10, 15, 15, 15, 12,// 36
	#ifndef TH1
	13, 13, 13, 13, 13, 13, 13, 13
	#endif
};
// 0x004A5968
int Flip_DropSound[FL_52_COUNT] = {
	S_30_I_FLIPBODY, 28, 39, 32, 47, 33, 44, 43, 46,	41, 28,
	45, 40, 33, 152, 38, 42, 34, 31, 31, 39, 39, 39, 39, 39, 39, 39, 39,
	44, 31, 39, 149, 29, 27, 45, 31, 45, 42, 41,
	31, 31, 45, 35, 1090,//39
	#ifndef TH1
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106
	#endif
};
// 0x004A5A18
int Flip_InventorySound[FL_52_COUNT] = {// таблица звучаний вещи при установки в инвентарь в зависимости от флипа
	S_52_I_INVBODY, 	S_50_I_INVAXE, 	S_60_I_INVPOT, 	S_54_I_INVBOW,	S_47_I_GOLD, 
	55,	65, 64, 67, 62, 
	50,	66,	61, 55,	153, 
	59,	63,	57,	53,	53, 
	60,	60,	60,	60,	60,
	60,	60,	60,	65, 53, 
	60,	150,51,	49,	66, 
	53,	66,	63,	62,	53, 
	53,	66,	58, 1091, //39
	#ifndef TH1
	1092, 1093, 1094, 1095, 1096, 1097, 1098, 65
	#endif
};
char *SitemPtr = aSitem;
int ScanedMapCol = 16;

// 004A7860
uchar LightDelta[24] = { 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 4, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0 };
int SomeDword_2	= 7;			

// int array at 0x00944310 
int BaseMonsterIndexes[BASE_222_MONSTERS + 16] = {
	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 39, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 59, 58, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 0, 0, 0, 0, 72, 73, 74, 75, 0, 0, 0,
	0, 77, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 91, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 0, 110, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 111, 112, 113, 114, 115, 116, 117, 113, 114, 115, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 127, 128, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
	144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221
};

// int array at 0x00945258 
int ValidBaseMonster[BASE_222_MONSTERS] =  {
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1,
	1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,
	1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0,
	0, 1
};

MonsterFrameSpeed MonsterFramesSpeed[24] = {
	{256, 512, 1024}, //  0
	{128, 256,  512}, //  1
	{ 85, 170,  341}, //  2
	{ 64, 128,  256}, //  3
	{ 51, 102,  204}, //  4
	{ 42,  85,  170}, //  5
	{ 36,  73,  146}, //  6
	{ 32,  64,  128}, //  7
	{ 28,  56,  113}, //  8
	{ 26,  51,  102}, //  9
	{ 23,  46,   93}, // 10
	{ 21,  42,   85}, // 11
	{ 19,  39,   78}, // 12
	{ 18,  36,   73}, // 13
	{ 17,  34,   68}, // 14
	{ 16,  32,   64}, // 15
	{ 15,  30,   60}, // 16
	{ 14,  28,   57}, // 17
	{ 13,  26,   54}, // 18
	{ 12,  25,   51}, // 19
	{ 12,  24,   48}, // 20
	{ 11,  23,   46}, // 21
	{ 11,  22,   44}, // 22
	{ 10,  21,   42}, // 23
};

char TypeOfAnimation[6] = {
	'n', // 0 nothing (stop) 
	'w', // 1 walk           
	'a', // 2 attack         
	'h', // 3 hit            
	'd', // 4 die            
	's'	 // 5 second attack  
};

int OrientMinusOne[8] = { 7, 0, 1, 2, 3, 4, 5, 6};
int OrientPlusOne[8] = { 1, 2, 3, 4, 5, 6, 7, 0};
int OrientInverted[8] = { 4, 5, 6, 7, 0, 1, 2, 3};

int Dword16Array[16] = { 5, 10, 15,	20, 10, 15, 20, 30, 20, 30, 40, 50,	60, 70, 80, 90 };

HANDLE CurrentSaveFileHandle = (HANDLE)0xFFFFFFFF;

HANDLE NetFrameSyncThreadHandle = (HANDLE)0xFFFFFFFF;
// 00A34C50, было 0x004B3DC0
BASE_OBJECT BaseObjectsTableIndexes[] = {
//	0	1	2	3	4	5	6	7	8	9
	BO_0_L1BRAZ,	BO_4_LEVER,		BO_20_CRUCIFIED_SKELETON,	BO_21_CRUCIFIED_SKELETON_2,	BO_22_CRUCIFIED_SKELETON_3,	BO_24_ANGEL,	BO_11_BANNER,	BO_12_BANNER,	BO_13_BANNER,	BO_0_L1BRAZ,	// 0
	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_25_ANCIENT_TOME_OR_BOOK_OF_VILENESS,	BO_41_MYTHICAL_BOOK,	BO_26_BURNCROS,	BO_0_L1BRAZ,	BO_8_L1BRAZ,	BO_9_CANDLE2,	// 10
	BO_10_L1BRAZ,	BO_80_CAULDRON,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	// 20
	BO_49_FLAME1,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_84_MCIRL,	BO_85_MCIRL,	BO_3_TORCH,	BO_14_SKULPILE,	// 30
	BO_15_L1BRAZ,	BO_16_L1BRAZ,	BO_17_L1BRAZ,	BO_18_L1BRAZ,	BO_19_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	// 40
	BO_0_L1BRAZ,	BO_28_SKULL_LEVER,	BO_0_L1BRAZ,	BO_53_WALL_TRAP_FIRES_IN_ROW,	BO_54_WALL_TRAP_FIRES_IN_COL,	BO_36_TSOUL,	BO_37_TSOUL,	BO_38_TSOUL,	BO_39_TSOUL,	BO_40_TSOUL,	// 50
	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_27_NUDE2,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	// 60
	BO_29_BURNCROS,	BO_30_TNUDEM,	BO_31_TNUDEM,	BO_32_TNUDEM,	BO_33_TNUDEW,	BO_34_TNUDEW,	BO_35_TNUDEW,	BO_5_SMALL_CHEST,	BO_5_SMALL_CHEST,	BO_5_SMALL_CHEST,	// 70
	BO_6_CHEST,		BO_6_CHEST,		BO_6_CHEST,	BO_7_LARGE_CHEST,	BO_7_LARGE_CHEST,	BO_7_LARGE_CHEST,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	// 80
	BO_0_L1BRAZ,	BO_73_PEDESTAL_OF_BLOOD,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	// 90
	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_83_ALTBOY,	BO_0_L1BRAZ,	BO_0_L1BRAZ,	BO_89_ARMOR_2,	BO_90_WEAPON_RACK,	// 100
	BO_47_WTORCH2,	BO_46_WTORCH1,	BO_94_MUSHROOM_PATCH,	BO_66_BLOOD_FOUNTAIN, 	BO_67_DECAPITATED_BODY, BO_76_PURIFYING_SPRING,	BO_86_QUEST_BOOK, BO_81_MURKY_POOL, BO_79_GOAT_SHRINE, BO_62_BOOKCASE,		// 110
	BO_63_BOOKCASE_2,	BO_64_LIBRARY_BOOK, BO_57_POD_URN_BARREL_WITH_DROP,	BO_58_POD_URN_BARREL_EXPLOSIVE, BO_98_HELLFORGE
};

char* FloorObjectsNamesOriginal[57] = {// 00A3FB90, было 004B5090
	"L1Braz",   // 0
	"L1Doors",   // 1
	"Lever",   // 2
	"Chest1",   // 3
	"Chest2",   // 4
	"Banner",   // 5
	"SkulPile",   // 6
	"SkulFire",   // 7
	"SkulStik",   // 8
	"CruxSk1",   // 9
	"CruxSk2",   // 10
	"CruxSk3",   // 11
	"Book1",   // 12
	"Book2",   // 13
	"Rockstan",   // 14
	"Angel",   // 15
	"Chest3",   // 16
	"Burncros",   // 17
	"Candle2",   // 18
	"Nude2",   // 19
	"Switch4",   // 20
	"TNudeM",   // 21
	"TNudeW",   // 22
	"TSoul",   // 23
	"L2Doors",   // 24
	"WTorch4",   // 25
	"WTorch3",   // 26
	"Sarc",   // 27
	"Flame1",   // 28
	"Prsrplt1",   // 29
	"Traphole",   // 30
	"MiniWatr",   // 31
	"WTorch2",   // 32
	"WTorch1",   // 33
	"BCase",   // 34
	"BShelf",   // 35
	"WeapStnd",   // 36
	"Barrel",   // 37
	"Barrelex",   // 38
	"LShrineG",   // 39
	"RShrineG",   // 40
	"Bloodfnt",   // 41
	"Decap",   // 42
	"Pedistl",   // 43
	"L3Doors",   // 44
	"PFountn",   // 45
	"Armstand",   // 46
	"Goatshrn",   // 47
	"Cauldren",   // 48
	"MFountn",   // 49
	"TFountn",   // 50
	"Altboy",   // 51
	"Mcirl",   // 52
	"Bkslbrnt",   // 53
	"Mushptch",   // 54
	"LzStand",   // 55
	"Hellforge",	//56
};
char *FloorObjectsNamesCrypt[57] = {// 00A3FE70, было 004B5170
	"L1Braz",   // 0
	"L5Door",   // 1
	"L5Lever",   // 2
	"Chest1",   // 3
	"Chest2",   // 4
	"Banner",   // 5
	"SkulPile",   // 6
	"SkulFire",   // 7
	"SkulStik",   // 8
	"CruxSk1",   // 9
	"CruxSk2",   // 10
	"CruxSk3",   // 11
	"Book1",   // 12
	"bkstn2",   // 13
	"Rockstan",   // 14
	"Angel",   // 15
	"Chest3",   // 16
	"Burncros",   // 17
	"L5Light",   // 18
	"Nude2",   // 19
	"Switch4",   // 20
	"TNudeM",   // 21
	"TNudeW",   // 22
	"TSoul",   // 23
	"L2Doors",   // 24
	"WTorch4",   // 25
	"WTorch3",   // 26
	"L5Sarco",   // 27
	"Flame1",   // 28
	"Prsrplt1",   // 29
	"Traphole",   // 30
	"MiniWatr",   // 31
	"WTorch2",   // 32
	"WTorch1",   // 33
	"crypt_bookcase",   // 34
	"bkstnd",   // 35
	"WeapStnd",   // 36
	"Urn",   // 37
	"Urnexpld",   // 38
	"L5shrnl",   // 39
	"L5shrnr",   // 40
	"Bloodfnt",   // 41
	"Decap",   // 42
	"Pedistl",   // 43
	"L3Doors",   // 44
	"PFountn",   // 45
	"Armstand",   // 46
	"Goatshrn",   // 47
	"Cauldren",   // 48
	"MFountn",   // 49
	"TFountn",   // 50
	"Altboy",   // 51
	"Mcirl",   // 52
	"L5Books",   // 53
	"Mushptch",   // 54
	"LzStand",   // 55
	"Hellforge",	//56
};

char* FloorObjectsNamesAbyss[57] = {// 00A40150, было 004B5250
	"L1Braz",   // 0
	"L1Doors",   // 1
	"Lever",   // 2
	"Chest1",   // 3
	"Chest2",   // 4
	"Banner",   // 5
	"SkulPile",   // 6
	"SkulFire",   // 7
	"SkulStik",   // 8
	"CruxSk1",   // 9
	"CruxSk2",   // 10
	"CruxSk3",   // 11
	"Book1",   // 12
	"Book2",   // 13
	"Rockstan",   // 14
	"Angel",   // 15
	"Chest3",   // 16
	"Burncros",   // 17
	"Candle2",   // 18
	"Nude2",   // 19
	"Switch4",   // 20
	"TNudeM",   // 21
	"TNudeW",   // 22
	"TSoul",   // 23
	"L2Doors",   // 24
	"WTorch4",   // 25
	"WTorch3",   // 26
	"Sarc",   // 27
	"Flame1",   // 28
	"Prsrplt1",   // 29
	"Traphole",   // 30
	"MiniWatr",   // 31
	"WTorch2",   // 32
	"WTorch1",   // 33
	"BCase",   // 34
	"BShelf",   // 35
	"WeapStnd",   // 36
	"L6Pod1",   // 37
	"L6Pod2",   // 38
	"LShrineG",   // 39
	"RShrineG",   // 40
	"Bloodfnt",   // 41
	"Decap",   // 42
	"Pedistl",   // 43
	"L3Doors",   // 44
	"PFountn",   // 45
	"Armstand",   // 46
	"Goatshrn",   // 47
	"Cauldren",   // 48
	"MFountn",   // 49
	"TFountn",   // 50
	"Altboy",   // 51
	"Mcirl",   // 52
	"Bkslbrnt",   // 53
	"Mushptch",   // 54
	"LzStand",   // 55
	"Hellforge",	//56
};

// 004B5C98
ClassProperty ClassPropTable[6] = {
	// AngryStayFrames, AttackFrames, AngryWalkFrames, BlockFrames, DeathFrames,
	// SpellFrames, HitFrames, StayFrames, WalkFrames, AttackActionIndex, SpellActionIndex
	{ 10, 16, 8, 2, 20, 20, 6, 20, 8, 9, 14 },
	{ 8, 18, 8, 4, 20, 16, 7, 20, 8, 9, 12 },
	{ 8, 16, 8, 6, 20, 12, 8, 20, 8, 11, 8 },
	{ 8, 16, 8, 2, 20, 18, 6, 20, 8, 10, 10 },
	{ 8, 18, 8, 3, 20, 16, 6, 20, 8, 8, 9 },
	{ 10, 16, 8, 2, 20, 20, 6, 20, 8, 9, 16 }
};

// 004B5CE0
ClassSteps ClassProp2Table[6] = {
	{0x800, 0x400, 0x200},
	{0x800, 0x400, 0x200},
	{0x800, 0x400, 0x200},
	{0x800, 0x400, 0x200},
	{0x800, 0x400, 0x200},
	{0x800, 0x400, 0x200},
};

// 004B5D28
int NumberOfSubStepsByClass[6] = { 8, 8, 8, 8, 8, 8 };

int InitialStr[6] = {// 004B5D40
	25,	// Paladin
	15,	// Scout
	10,	// Mage
	15,	// Monk
	15,	// Assassin
	30,	// Gladiator
};
int InitialMag[6] = {// 004B5D58
	5,	// Paladin
	5,	// Scout
	30,	// Mage
	5,	// Monk
	10,	// Assassin
	0,	// Gladiator
};
int InitialDex[6] = {// 004B5D70
	15,	// Paladin
	30,	// Scout
	10,	// Mage
	25,	// Monk
	20,	// Assassin
	10,	// Gladiator
};
int InitialVit[6] = {// 004B5D88
	20,	// Paladin
	15,	// Scout
	15,	// Mage
	20,	// Monk
	20,	// Assassin
	25,	// Gladiator
};

// 004B5DA0
int ClassBlockBonusTable[6] = { 10, 1, 1, 1, 5, 2 }; 

#ifndef TH1
// 004B5DB
char* ClassNamePtrs[6] = { 
	"Warrior",
	"Archer",
	"Mage",
	"Monk",
	"Rogue",
	"Fighter",
};
#endif

// 0x004B5DD0
PlayerStat MaxStat[6] = {
	{ 240,	 60,	160,	180 },	// 0 Paladin
	{ 120,	 70,	250,	150 },	// 1 Scout
	{ 110,	250,	 90,	130 },	// 2 Mage
	{ 160,	 80,	220,	170 },	// 3 Monk
	{ 130,	140,	210,	160 },	// 4 Assassin
	{ 250,	 20,	130,	240 },	// 5 Gladiator
};

int TownStartingRow[4] = { 57, 59, 61, 63 }; // координаты выхода из портала 
int TownStartingCol[4] = { 40, 40, 40, 40 };

int* dungeonTilesOffset = DungeonTilesOffset;
// 004B6D7D
uint RightTransMask[32] = { 
	0xEAAAAAAA,0xF5555555,0xFEAAAAAA,0xFF555555,0xFFEAAAAA,0xFFF55555,0xFFFEAAAA,0xFFFF5555,
	0xFFFFEAAA,0xFFFFF555,0xFFFFFEAA,0xFFFFFF55,0xFFFFFFEA,0xFFFFFFF5,0xFFFFFFFE,0xFFFFFFFF,
	0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,
	0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,
};
// 004B6DFD
uint LeftTransMask[32] = {
	0xAAAAAAAB,0x5555555F,0xAAAAAABF,0x555555FF,0xAAAAABFF,0x55555FFF,0xAAAABFFF,0x5555FFFF,
	0xAAABFFFF,0x555FFFFF,0xAABFFFFF,0x55FFFFFF,0xABFFFFFF,0x5FFFFFFF,0xBFFFFFFF,0xFFFFFFFF,
	0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,
	0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,
};
// нет ссылок, очень странно, проверить, может предыщий 64
// 004B6E7D
uint RightTransMask_1[32] = { 
	0xAAAAAAAA,0x55555555,0xAAAAAAAA,0x55555555,0xAAAAAAAA,0x55555555,0xAAAAAAAA,0x55555555,
	0xAAAAAAAA,0x55555555,0xAAAAAAAA,0x55555555,0xAAAAAAAA,0x55555555,0xAAAAAAAA,0x55555555,
	0xAAAAAAAA,0x55555555,0xAAAAAAAA,0x55555555,0xAAAAAAAA,0x55555555,0xAAAAAAAA,0x55555555,
	0xAAAAAAAA,0x55555555,0xAAAAAAAA,0x55555555,0xAAAAAAAA,0x55555555,0xAAAAAAAA,0x55555555,
};
// Location Table
char* QuestNameTable[29] = {// 00A34000
	ZeroString,						// QF_0
	"King Leoric's Tomb",			// QF_1_KING_LEORICS_TOMB
	"Bone Chamber",					// QF_2_BONE_CHAMBER
	"the Infested Cellar",			// QF_3_THE_INFESTED_CELLAR
	"Poisoned Water Supply",		// QF_4_POISONED_WATER_SUPPLY
	"Archbishop Lazarus' Lair",		// QF_5_ARCHBISHOP_LAZARUS_LAIR
	"Halls of Anguish",				// QF_6_HALLS_OF_ANGUISH
	"Andariel's Throne",			// QF_7_ANDARIELS_THRONE
	"Horazon's Haven",				// QF_8_HORAZONS_HAVEN
	"Summoning Rooms",				// QF_9_SUMMONING_ROOMS
	"The Pit",						// QF_10_THE_PIT
	"Passage of Fire",				// QF_11_PASSAGE_OF_FIRE
	"Valley of Despair",			// QF_12_VALLEY_OF_DESPAIR
	"Disused Reliquary",			// QF_13_DISUSED_RELIQUARY
	"Glacial Caverns",				// QF_14_GLACIAL_CAVERNS
	"Frozen Loch",					// QF_15_FROZEN_LOCH
	"Island of the Sunless Sea",	// QF_16_ISLAND
	"Pit of Flame",					// QF_17_FLESHDOOM
	"City of the Damned",			// QF_18_WIELDER
	"Hellforge",					// QF_19_HEPHASTO
	0,								// QF_20
	0,								// QF_21
	0,								// QF_22
	0,								// QF_23
	0,								// QF_24
	0,								// QF_25_RAVENHOLM
};

// это что-то чрезвычайно странное, использование выравнивания заголовка экзешника, либо опечатка в адресе
// нужен полный workshop и архив titanpad'а для изысканий
// попробовать поймать в отладчике обращение по адресу
// 00A34130
char* aByteAt400d70Is = "Byte at 400D70 is USED for quest level transactions. Dont touch!";

char IsMusicEnabled	= 1;			
char IsSoundEnable = 1;			
char SomeFlag3 = 1;			
int CurrentDungeonThemeIndex = 8;	

char *DungeonThemeTable[8] = {
/* 0	*/	"Music\\RazTE.wav",
/* 1	*/	"Music\\RazA.wav",
/* 2	*/	"Music\\RazB.wav",
/* 3	*/	"Music\\RazC.wav",
/* 4	*/	"Music\\RazD.wav",
/* 5	*/	"Music\\DLvlE.wav",
/* 6	*/	"Music\\DLvlF.wav",
/* 7	*/	"Music\\Dintr3.wav",
};

char* MpHorror1MusicTable		[8]={
/* 0	*/	"Music\\DTown5.wav",
/* 1	*/	"Music\\RazA.wav",
/* 2	*/	"Music\\RazB.wav",
/* 3	*/	"Music\\RazC.wav",
/* 4	*/	"Music\\RazD.wav",
/* 5	*/	"Music\\DLvlE.wav",
/* 6	*/	"Music\\DLvlG.wav",
/* 7	*/	"Music\\Dintro.wav",
};
char* MpHorror2MusicTable		[8]={
/* 0	*/	"Music\\DTownE.wav",
/* 1	*/	"Music\\DLvlO.wav",
/* 2	*/	"Music\\DLvlP.wav",
/* 3	*/	"Music\\DLvlC.wav",
/* 4	*/	"Music\\DLvlD.wav",
/* 5	*/	"Music\\DLvlN.wav",
/* 6	*/	"Music\\DLvlF.wav",
/* 7	*/	"Music\\Dintr1.wav",
};
char* MpHorror3MusicTable		[8]={
/* 0	*/	"Music\\Dtown7.wav",
/* 1	*/	"Music\\RazA.wav",
/* 2	*/	"Music\\RazB.wav",
/* 3	*/	"Music\\RazC.wav",
/* 4	*/	"Music\\RazD.wav",
/* 5	*/	"Music\\RazE.wav",
/* 6	*/	"Music\\RazF.wav",
/* 7	*/	"Music\\Dintr2.wav",
};
char* MpPurgatory3MusicTable	[8]={
/* 0	*/	"Music\\RazTE.wav",
/* 1	*/	"Music\\RazA.wav",
/* 2	*/	"Music\\RazB.wav",
/* 3	*/	"Music\\RazC.wav",
/* 4	*/	"Music\\RazD.wav",
/* 5	*/	"Music\\DLvlT.wav",
/* 6	*/	"Music\\DLvlF.wav",
/* 7	*/	"Music\\Dintr1.wav",
};
char* SpMpPurgatoryMusicTable	[8]={
/* 0	*/	"Music\\DTown3.wav",
/* 1	*/	"Music\\DLvlH.wav",
/* 2	*/	"Music\\DLvlK.wav",
/* 3	*/	"Music\\DLvlL.wav",
/* 4	*/	"Music\\DlvlS.wav",
/* 5	*/	"Music\\DLvlT.wav",
/* 6	*/	"Music\\DLvlR.wav",
/* 7	*/	"Music\\Dintr4.wav",
};
char* MpDoom2MusicTable			[8]={
/* 0	*/	"Music\\DTown4.wav",
/* 1	*/	"Music\\DLvlJ.wav",
/* 2	*/	"Music\\DLvlK.wav",
/* 3	*/	"Music\\DLvlL.wav",
/* 4	*/	"Music\\DLvlS.wav",
/* 5	*/	"Music\\DLvlT.wav",
/* 6	*/	"Music\\DLvlR.wav",
/* 7	*/	"Music\\Dintr2.wav",
};
char* MpDoom3MusicTable			[8]={
/* 0	*/	"Music\\DTown3.wav",
/* 1	*/	"Music\\DLvlH.wav",
/* 2	*/	"Music\\DLvlP.wav",
/* 3	*/	"Music\\RazC.wav",
/* 4	*/	"Music\\RazD.wav",
/* 5	*/	"Music\\DLvlN.wav",
/* 6	*/	"Music\\DLvlF.wav",
/* 7	*/	"Music\\Dintr2.wav",
};
char* GenericTraxMusicTable		[8]={
/* 0	*/	"Music\\RazTE.wav",
/* 1	*/	"Music\\RazA.wav",
/* 2	*/	"Music\\RazB.wav",
/* 3	*/	"Music\\RazC.wav",
/* 4	*/	"Music\\RazD.wav",
/* 5	*/	"Music\\DlvlE.wav",
/* 6	*/	"Music\\DlvlG.wav",
/* 7	*/	"Music\\Dintr3.wav",
};
char* SpDoomMusicTable			[8]={
/* 0	*/	"Music\\DTown4.wav",
/* 1	*/	"Music\\DLvlJ.wav",
/* 2	*/	"Music\\RazB.wav",
/* 3	*/	"Music\\RazC.wav",
/* 4	*/	"Music\\DLvlS.wav",
/* 5	*/	"Music\\DLvlT.wav",
/* 6	*/	"Music\\DLvlF.wav",
/* 7	*/	"Music\\Dintr2.wav",
};
char* WormLvlMusicTable			[8]={
/* 0	*/	"Music\\Dtown7.wav",
/* 1	*/	"Music\\RazA.wav",
/* 2	*/	"Music\\RazB.wav",
/* 3	*/	"Music\\Abs02.wav",
/* 4	*/	"Music\\Dintr1.wav",
/* 5	*/	"Music\\RazE.wav",
/* 6	*/	"Music\\valley.wav",
/* 7	*/	"Music\\Dintr2.wav",
};

uchar QuestFloorIndex; // 0061CB00
int YOffsetHashTable[Y_SIZE];// 006EB688 1024 в оригинале
int LevelRandSeed[25];
/*int dword_6E25CC;*/
/*int SomeDwordFlags;*/
char* Items_DurIconsCEL;
char* Items_DurIconsCEL2;
char* Data_CharButCEL;
int NeedDrawLife; // 004D0E40
bool IsGoldSplitPanelVisible;// 004D0E44
int ButtonArray[8];
int AttributeUpAvail[4];
char* CtrlPan_P8But2CEL;
char* CtrlPan_Panel8buCEL;
char* Data_CharCEL;
bool IsCursorOnLevelUpButton;
char String80Array8[640];
int HowManyGoldYouWantToRemove;// 004D1108
int NeedDrawMana;// 004D110C
int ButtonStatDown;
char* FontSpriteSmall;
int PentSpnCurrentPicNumber;
int TalkPanelButtonState[3];
int SelectedSpellIndex;
int MainPanelSelector;
char* CtrlPan_GolddropCEL;
char* Data_SpellBkBCEL;
char InfoPanelHeader[MAX_PATH];      // было [255] 004D12F0
char InfoPanelBuffer[256]; // 004D11C0
char MayPlayersTalk[4];    // some flags for drawing button // was char MayPlayersTalk[5]
int CurrentSpellBookPage;
int CurCellIndex;
int TalkPanelMode;
char* Data_SpellI2CEL;
bool IsSPELLPanelVisible;
bool IsCHARPanelVisible;
int NeedDrawButtons;
char* Data_SpellBkCEL;
int ButtonsCount;
int MaybeNeedDrawInfoPanel;
int GoldYouHave;
char* Data_SpelIconCEL;
int MainPanelButtonFlag;
int SelectCurSpellMode;
int ItemHeight;
int ItemHeightCells;
int ItemWidth;
int CurMon; // Monter Under Cursor 004D162C
int ItemWidthCells;

// графика вещей в инвентаре
char* ClassicItemSprites;
char* AddonItemSprites;
char* ClassicModItemSprites;
char* AddonModItemSprites;

char* SquareCELPtr;
char MultiplayerDebugMap1[26 * 112 * 112];
char MultiplayerDebugMap2[26 * 112 * 112];
/*int SomeLevelsArray[26];*/
HINSTANCE HInstance;
int NeedRedrawAll;
int TestFOPMFlag = 0; // 005753B0
int NormalLighting = 0;
bool NewSingleGameFromCurrentPos = 0;
int GamePaused;
char NotUsedFlagWithPalette;
CRITICAL_SECTION CriticalSection4;// 0057A1A8
DWORD ThreadId;
int* NetCmdSendQueuePtr;// 0057A1C4
char IsEventCreated;
HANDLE hEvent;
uchar* WorkingSurface;                      // указатель на память размером 656*768
uchar* WorkingSurfaceEnd;                   // это нижний придел, ниже которого целлы рисоваться не будут. например граница белта.
int PlayerSoundMessageDelay;	// 0057A214
int SoundMessage;				// 0057A218
/*int ValFromLevelArray_0;*/
char OnScreenMessageQueue[80]; // 0057B660
char OnScreenMessageTime; // 0057B6B0
char OnScreenMessageIndex; // 0057B6B4 используется как индекс, это не bool
uchar OnScreenMessagesQueueCount;
ushort TileLightMapTop[2048];
char CellTransparent[2049];// 0057C9D8

#ifdef GUARD
#define G(i) __pragma(section(#i,read,write)); __declspec(allocate(#i)) alignas(0x1000) int i[GSZ]; __declspec(allocate(#i)) alignas(0x1000) int i##_[GSZ]; __declspec(allocate(#i)) alignas(0x1000)
#else
#define G(i) //__pragma(section(#i,read,write)); __declspec(allocate(#i)) alignas(0x1000) int i[GSZ]; __declspec(allocate(#i)) alignas(0x1000) int i##_[GSZ]; __declspec(allocate(#i)) alignas(0x1000)
#endif

G(Z0) int MonsterMap[ 112 ][ 112 ]			; // 0057D1E0 
G(Z1) char LightMap[ 112 ][ 112 ]			;
G(Z2) char PlayerMap[ 112 ][ 112 ]			;
G(Z3) uchar FlagMap[ 112 ][ 112 ]			;
G(Z4) char ItemsOnGroundMap[ 112 ][ 112 ]	;
G(Z5) int FineMap[ 112 ][ 112 ]				; // 005F5BB0
G(Z6) char MissilesMap[ 112 ][ 112 ]		; // 0 нет каста, -1 несколько, остальные - НОМЕРА заклинаний из Missiles[missileNum - 1];
G(Z7) char ObjectsMap[ 112 ][ 112 ]			;
G(Z8) Item ItemsOnGround[ 128 ]				; // 0x00686280
G(Z9) Missile Missiles[ Missile_125_Max ]	;// 00697A58
G(ZA) Object Objects[ 127 ]					;// 006DE5C0
G(ZB) Monster Monsters[ 200 ]				; // 0069DC88 
G(ZC) PathStep StepsPool[ 300 ]				; //Struct52Array300
G(ZD) int MonsterIndexes[ 200 ]				;// 0069D960
G(ZE) int MissileIndexes[Missile_125_Max]	;// 00697668
G(ZF) uchar DeathMonstersMap[ 112 ][ 112 ]	;
G(Zz0) int Zzz0								;
// for( int i = 0; i < 16; i++ ) TileMap[ IsometricMapOffset(row, col) ].tile[i]
TileColumn TileMap[ 112 * 112 ]; // = ((ushort*)CurrentLevelMINFile[32 * (FineMap[ row ][ col ] - 1)])[14 - (i & 14) + (i & 1)];
char* DarkenDungeonTiles;
int LevelCELsAmount;
unsigned char OriginalLightMap[ 112 ][ 112 ];
uchar HallIndex;
int MaxTilesInCell;
unsigned char  PerPixelLight[32 * 32];
bool PixelLight = false;
int LoadedQuestDungeonMap;
int TileLightMapIndex[2048];
char* CurrentLevelTilesFile;
char* CurrentLevelMINFile;
int Difficulty; // 006070С0
uchar WallsTransparency[2049];
uchar HallMap[ 112 ][ 112 ];// 006078D0
char IsWall[2049];// 0060A9D0
uchar DungeonType;// 0060B1D4
uchar DungeonLevel; // 0060B1D8
char TransparentModes[256]; // 0060B1E0
uchar TileBlockWalking[2049];// 0060B2E0
uint TileLightMapCounter[2048];
int PlayerMovedX;                           // сдвиг всех спрайтов в сторону при фазах движения, -32...+32
int PlayerMovedY;
int DistanceX;// 0060DAF0
int DistanceY;// 0060DAF4
int PlayerMoveInsideTileDir; // 0060DAF8
int* CurrentLevelCELFile;
int DungeonTilesOffset[2048];
Chamber Chambers[50];
bool HorizontalHit = false;
int LandScreenMinX;
int LandScreenMinY;
int LandScreenMaxX;
int LandScreenMaxY;
uchar TileBlockSight[2049];// 006160F8
char* CurrentLevelSCELFile;
char QuestSPIndex;
int SizeOfLevelCEL[2048];
uchar TileBlockMissle[2049];// 0061EB08
char* QuestPatternPtr;
/*char MayBeQuest;*/
int SomeYPos2;
int SomeXPos2;
int MapEndRow;
int MapEndCol;
int PatternMapCols;
int PatternMapRows;
int StartPatternRow40;
int PlayerRowPos;// 0061F334
int PlayerColPos;// 0061F338
int StartPatternCol40;
/*char* ByteArrayPtr;*/
int HelpCurrentPosition;
int SomeHelpMemory_1;
int IsHELPVisible;
int SomeHelpMemory_2;
int HelpStringsCoint;
int IsMainWindowActive;
int (__stdcall *Handler1)(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
int MOMParentFound;
char SomeBoolFlag_38;
bool IsINVPanelVisible;
char* InvPanelCEL;
int NeedDrawBelt;                                                             // SomeBoolFlag_39
int StatusMessageTimeout;
NetItemReg NetItemsReg[127];
/*int DMap3x3_0[9];*/
int AlreadyDroppedUniqs[256];      // 00691ED8 Dword128ArrayWithUniqueItem[128]
int DoubleMaxGoldInCell;
int NetItemsRegCount;
PlayerVisibility PlayerVisibilityes[32];
char LightIndexes[32];
int LightsCount;
unsigned char Map128x16[2048];
int IsPlayerLightRadiusChanged;
int PlayerVisibilityesCount;
char MaxDarkLevel;
int NeedLightRecalc;
uchar LightDiagram[128*128];
int SomeBoolFlag_57;
int FullLighting;
ushort TotalSlain[400];
int MonstersCount;// 0069DC80
char BeforeMonsterArray; // вроде через это передается IsSoundEnable между MayBe_KillDiabloEffect и Level16PlayerReset
int MonsterArraySize;
//int AfterDMap84x24;
//int DwordArray257h[599];
int SomeDword_83_withVideo;
char WriteBuffer[4096];
int SomeDword_84;
char LastNetCommanID;
uint* NetPacket; // 0x006CF818 may be a struct NetPacket
uint* NetPacketQueue;
char LockedNetwork = 0;
int NetMessageCount = 0;
int OldTickCount6;
uchar MaxCountOfPlayersInGame; // 006DDFC8
CRITICAL_SECTION FrameSyncCritSection;
uint Divider;
char SomeByte_18;
uint SyncNetFrameTimeThreadId;
char SomeByte_20;
int NetTurnNeedSync;
char SomeByte_21;
char SomeByte_19;
char FrameSyncCritSecState;
uint MaxNetMsgSize;
int NetPacketSize_1;
uint MainFrameTimer;
int ObjectsIndex[127];// 006DE1B8
int ObjectsIndexInverse[127];
//int dword_6E2570;
//char byte_6E2575[3];
//int dword_6E258C;
//char byte_6E2591[3];
//__int16 word_6E25CC;
//char byte_6E25CE[898];                                                                                                    
//Map13x300Row                                                                                      
//Struct52Ptr
uint CurrentPlayerIndex; // 006EADE8
int IsPlayerDead;
int DeathDelayTimer;
Player* Players; // 006EAE14
unsigned __int8 PlayerStatusMessageIndex;
PlayerStatusMessage GlobalPlayerStatusMessages[8];
DungeonEntryPoint PlayersEntryPoint[4]; // 006EB2E0
int ServerPlayerIndex;
uchar DarkLevel;
int DMap16x64[1024];
uint CurTileID;
char DrawTypeSelector; // 006EC6A8	0,1,2
int TransparentMode;
int WallIndex;
bool IsDirectSoundAllocated;
//int AfterSome25Items;
ushort ActivationTimers[200];
int ActivationMonsterIndex;
short MonsterActivationTable[200];
int NextItemOnMapIndex;
int Slot_ID = 0;
char* ServerDataPtr;
char IsObjectUnderCursorChanged;
int OldTickCount5;
int IsGameObjectUnderCursor;
int DMap4xN[32];

int LeverClickPlayerSound = -1;
int LeverClickPlayerSoundIndex = 0;
 // 00A35F70
int LeverSounds[/*6*3*/] = {
	835, 721, 618, 716, 721, 835,
	836, 1023, 619, 716, 1023, 836,
	837, 723, 620, 716, 723, 837
};

char FloorItemsIndexes[40];
int ObjectsSpritesCount;
char* ObjectsSprites[40];
int FlameOrientation;
int FlameGroupIndex;
int SomeDword_94;

// Все уровни имеют размер 40 * 40 клеток
// 1) Новая версия, правильная: каждая клетка делится на 2*2 подклеток, и дополнительно по 16 подклеток с каждой стороны
// для отрисовки внутренностей стен за краем карты и контролем движущихся объектов. В пользу это версии - то что помимо
// 112*112 = (16+40*2+16)*(16+40*2+16), есть еще и карты размером 80*80, а также постоянно встречающиеся формулы преобразования координат
// x112 = x40 * 2 + 16
// 2) Нулевые координаты находятся в верхнем углу карты относительно экрана
// по правой стороне координата y (row)
// по левой x (col)
uchar AltMap[ 40 ][ 40 ]; // Для смены архитектуры по рычагам и другим событиям 
uchar FixedMap[ 40 ][ 40 ]; // Карта неизменяемых клеток на данном этапе генерации 
uchar Map[ 40 ][ 40 ]; // Основная карта архитектуры подземелья, стены, полы по крупным тайлам 
char ArchGraphicsMap[ 112 ][ 112 ];
TileColumn TileLightMap[ 112 ][ 112 ];
int MapStartRow;
int MapStartCol;
int ChambersCount;
int ObjectsCount; // 006DE3B4
int IsPutSomeLightSorceUnlocked;
int DUNDiab1XOffset;
int DUNDiab1YOffset;
int DUNDiab3XOffset;
int DUNDiab3YOffset;
int DUNDiab2XOffset;
int DUNDiab2YOffset;
int DUNDiab4XOffset;
int DUNDiab4YOffset;

int NearFreeCell[9]; // 0x00691C80
int MapItemsFreeIndexes[128];
int ItemsOnMapIndexesInvers[128];
int CountItemsOnMap;
bool IsUniqueInfoPanelVisible;
char* FlipItemCELFiles[FL_52_COUNT];

char CooldownDecDelay = 0;// новая переменная глобальная A37700
int HasItemOnCornerstone;
Item ItemOnCornerStone;
int RowOfCornerStone;
int ColOfCornerStone;
int counterOfMap = 0;
const int MAX_TIMER = 5;
int GriswoldQlvlRandamizationArray[] = { // 004A5AD0
	-1, -1, -1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 3, 3
};

MonsterSprite MonsterSprites[24];             // Загруженная графика монстров. Одновременно на уровне доступно не более 24 видов монстров.
int MonsterSpritesCount;
int SomeSeedingSize;
int SomeBoolFlag_12 = 0;
int MapRowArraySize;
int MapRowArray[10];
CObjectUnderCursor Cur; // Object Under Cursor

// это должно быть MonsterCorpses[24], а затем идет какая-то другая структура
MonsterSpriteOffset MonsterSpriteOffsets[32]; // 004D1660

int WithRowIndex;
int GrimspikeMonsterIndex;
int NakrulMonsterIndex;
int LoadedMonsterSpell;
int IHateMonsters = 0;
char ThFilePath[MAX_PATH];
char GameVersionString[MAX_PATH] = "internal version unknown";
module_info ModuleInfo; // 00684A70
GameTemplate GameTemplateData;
char AllowedSlotToConnect[4];
char PlayersOnline[4];
int PlayersCurrentEvent[4];
char MayNetDiabloKilled;
char NetPlayerCount;// 006DCF90
__int16 InfoCountLoadedAboutPlayer[4];
PlayerInfo3 PlayersInfo[4];// 006DBBB8
uchar PlayerWaitWorldInformation[4];
uint ArrayPlayerStatus[4];
char WaitForNetTimeout;
uint NetTimeoutTick;
uchar Multyplier;
uint NetCallDelay; // 006DE0A0
uint NetTurnCount; // 006DCF88
unsigned int MonsterNetRandSeed;
char TheGameEndedFlag;
char SomeByte_16;
int SomeDword_85;
char SomeByte_15;
int TickCount;
// запакованная инфо об уровне
// В худшем случае размер равен NetLevelData + 1
// но структура не совпадает (?)
uchar NetLevelBuffer[5738]; // размер NetLevelData + 1, перепроверить структуру после фикса размера
char NotClearMap;
uint* ArrayData[4];
int ArrayDataSizes[4];
uchar NetPlayerIndex;
char HeroName[16];
HANDLE helldataMPQPtr;
HANDLE hellfireMPQPtr;
HANDLE hellmfMPQPtr;
HANDLE thmusicMPQPtr;
HANDLE helldfMPQPtr;
HANDLE hfmonkMPQPtr;
HANDLE hellgfxMPQPtr;
HANDLE thassaMORPtr;
HANDLE thgladMPQPtr;
HANDLE thehell2MPQPtr;
char AnimSizeCounted;
int AnimSizeStay;
int AnimSizeWalk;
int AnimSizeAttack;
int AnimSizeHit;
int AnimSizeLightning;
int AnimSizeFire;
int AnimSizeMagic;
int AnimSizeBlock;
int AnimSizeDeath;
char AnimSizeCounted2;
char NeedSelectProvider;
int ServerEntered;
int PacketBuf_MP[1026]; // 4K + 8
int PacketBuf_SP[1025]; // 4K + 4
int WithNetBoolFlag;
int DungeonLevelType[26];
char GameName[128];
char PasswordStr[128];
char MpqPath_1[MAX_PATH];
char MpqPath_2[MAX_PATH];
char MpqPath_3_Patch[MAX_PATH];
char MpqPath_4[MAX_PATH];
char MpqPath_5[MAX_PATH];
char MpqPath_6[MAX_PATH];
char MpqPath_7[MAX_PATH];
char MpqPath_9[MAX_PATH];
char MpqPath_8[MAX_PATH];
char MpqPath_Main[MAX_PATH];
char MpqPath_TH2[MAX_PATH];
char InstallKey[] = "DiabloInstall"; // 004A0AF0

// вот интересно, надо ли восстанавливать адресацию всех статических строк для сверки? или это не нужно?

//.data:004A0AFE                 align 10h
//.data : 004A0B00 aMainProgramArc db 'Main program archive: diabdat.mpq', 0
//.data : 004A0B00; DATA XREF : OpenGameArchives + A0o
//.data:004A0B22                 align 4
//.data : 004A0B24 aUi_artTitle_pc db 'ui_art\title.pcx', 0; DATA XREF : OpenGameArchives + 92o
//.data:004A0B35                 align 4
//.data : 004A0B38 aDiabdat_mpq_0  db 'diabdat.mpq', 0; DATA XREF : OpenGameArchives + 81o
//.data:004A0B44 aDiabdat_mpq    db '\diabdat.mpq', 0; DATA XREF : OpenGameArchives + 5Do
//.data:004A0B51                 align 4

// Class sprite animation / player model:
// Warrior, Rogue, Sorcerer, Monk, Assassin, Gladiator
char ClassAnim    [6] = { 'W','R','S','M','A','G' }; // 00490388
char ClassAnimBase[6] = { 'W','R','S','M','R','W' }; // 00490390

// Player armor look:
// Light, Medium, Heavy
char ArmorAnim[4] = { 'L','M','H', 0 }; // 00490370

// Player weapon look:
// 0 - 'N' None ( Without Shield )
// 1 - 'U' Unweild ( Shield )
// 2 - 'S' Sword ( Without Shield ), Barbarian Dual Sword
// 3 - 'D' Dual ( Sword + Shield )
// 4 - 'B' Bow
// 5 - 'A' Axe ( Only Double Hand )
// 6 - 'M' Mace ( Without Shield ), Barbarian Dual Mace
// 7 - 'H' Hammer ( Mace + Shield )
// 8 - 'T' Twig ( Staff Double Hand )
// 9 - 'H' Hammer ( One Hand Wand + Shield )
// 10 - Dual Hand Sword
// 11 - Dual Hand Mace
char WeaponAnim[13] = { 'N','U','S','D','B','A','M','H','T','H','S','M', 0 }; // 00490378

// 00A36030 таблица соответствий номеров квестовых лок - длвлам
char QuestFloorDlvlsTable[26] = {0, 3, 6, 12, 2, 15, 13, 14, 23, 23, 23, 15, 20, 8, 9, 10, 12, 17, 17, 18, 0, 0, 0, 0, 0, 0};
char LastDungeonType = -1;
int WorldFrameIndex = 0;

// индекс буквы в .cel файле шрифта + 1 (так как нулевой элемент файла - количество спрайтов)
uchar FontIndexSmall[ 128 ] = {
	 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	 0, 54, 44, 57, 58, 56, 55, 47, 40, 41, 59, 39, 50, 37, 51, 52,
	36, 27, 28, 29, 30, 31, 32, 33, 34, 35, 48, 49, 60, 38, 61, 53,
	62,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 42, 63, 43, 64, 65,
	 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 40, 66, 41, 67,  0 
};

uchar FontWidthSmall[ 68 ] = {
	8, 10,  7,  9,  8,  7,  6,  8,  8,  3,  3,  8,  6, 11,  9,	10,
	6,  9,  9,  6,  9, 11, 10, 13, 10, 11,  7,  5,  7,  7,  8,  7,
	7,  7,  7,  7, 10,  4,  5,  6,  3,  3,  4,  3,  6,  6,  3,  3,
	3,  3,  3,  2,  7,  6,  3, 10, 10,  6,  6,  7,  4,  4,  9,  6,
	6, 12,  3,  7 
};

uchar FontIndexMid[ 128 ] = {
	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,
	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,
	0,	37,	49,	38,	0,	39,	40,	47,	42,	43,	41,	45,	52,	44,	53,	55,
	36,	27,	28,	29,	30,	31,	32,	33,	34,	35,	51,	50,	48,	46,	49,	54,
	0,	1,	2,	3,	4,	5,	6,	7,	8,	9,	10,	11,	12,	13,	14,	15,
	16,	17,	18,	19,	20,	21,	22,	23,	24,	25,	26,	42,	0,	43,	0,	0,
	0,	1,	2,	3,	4,	5,	6,	7,	8,	9,	10,	11,	12,	13,	14,	15,
	16,	17,	18,	19,	20,	21,	22,	23,	24,	25,	26,	48,	0,	49,	0,	0
};

uchar FontWidthMid[ 56 ] = {
	5,	15,	10,	13,	14,	10,	9,	13,	11,	5,	5,	11,	10,	16,	13,	16,
	10,	15,	12,	10,	14,	17,	17,	22,	17,	16,	11,	5,	11,	11,	11,	10,
	11,	11,	11,	11,	15,	5,	10,	18,	15,	8,	6,	6,	7,	10,	9,	6,
	10,	10,	5,	5,	5,	5,	11,	12
};

uchar FontIndexBig[ 128 ] = {
	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,
	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,
	0,	37,	49,	38,	0,	39,	40,	47,	42,	43,	41,	45,	52,	44,	53,	55,
	36,	27,	28,	29,	30,	31,	32,	33,	34,	35,	51,	50,	0,	46,	0,	54,
	0,	1,	2,	3,	4,	5,	6,	7,	8,	9,	10,	11,	12,	13,	14,	15,
	16,	17,	18,	19,	20,	21,	22,	23,	24,	25,	26,	42,	0,	43,	0,	0,
	0,	1,	2,	3,	4,	5,	6,	7,	8,	9,	10,	11,	12,	13,	14,	15,
	16,	17,	18,	19,	20,	21,	22,	23,	24,	25,	26,	20,	0,	21,	0,	0
};

uchar FontWidthBig[ 56 ] = {
	18,	33,	21,	26,	28,	19,	19,	26,	25,	11,	12,	25,	19,	34,	28,	32,
	20,	32,	28,	20,	28,	36,	35,	46,	33,	33,	24,	11,	23,	22,	22,	21,
	22,	21,	21,	21,	32,	10,	20,	36,	31,	17,	13,	12,	13,	18,	16,	11,
	20,	21,	11,	10,	12,	11,	21,	23
};

uchar Codepage[ 256 ] = {
	0,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,
	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,
	32,	33,	34,	35,	36,	37,	38,	39,	40,	41,	42,	43,	44,	45,	46,	47,
	48,	49,	50,	51,	52,	53,	54,	55,	56,	57,	58,	59,	60,	61,	62,	63,
	64,	65,	66,	67,	68,	69,	70,	71,	72,	73,	74,	75,	76,	77,	78,	79,
	80,	81,	82,	83,	84,	85,	86,	87,	88,	89,	90,	91,	92,	93,	94,	95,
	96,	97,	98,	99,100,101,102,103,104,105,106,107,108,109,110,111,
	112,113,114,115,116,117,118,119,120,121,122,123,124,125,126, 1,
	67,117,101,	97,	97,	97,	97,	99,101,101,101,105,105,105,	65,	65,
	69,	97,	65,111,111,111,117,117,121,	79,	85,	99,	76,	89,	80,102,
	97,105,111,117,110,	78,	97,111,	63,	1,	1,	1,	1,	33,	60,	62,
	111,43,	50,	51,	39,117,	80,	46,	44,	49,	48,	62,	1,	1,	1,	63,
	65,	65,	65,	65,	65,	65,	65,	67,	69,	69,	69,	69,	73,	73,	73,	73,
	68,	78,	79,	79,	79,	79,	79,	88,	48,	85,	85,	85,	85,	89,	98,	66,
	97,	97,	97,	97,	97,	97,	97,	99,101,101,101,101,105,105,105,105,
	111,110,111,111,111,111,111,47,	48,117,117,117,117,121,	98,121	
};

// Fargus executable is 1.01, addresses are ok
namespace Fargus
{
	char* FontSpriteSmall;
	char* FontSpriteMid;
	char* FontSpriteBig;

	uchar Codepage[ 256 ] = { // 0x00489520
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,// 0
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,// 16
		32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,// 32
		48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,// 48
		64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,// 64
		80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,// 80
		96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,// 96
		112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 1,// 112
		65, 35, 66, 38, 42, 69, 60, 51, 85, 85, 75, 36, 77, 72, 79, 62,// 128
		80, 67, 84, 89, 91, 88, 93, 52, 40, 41, 64, 126, 34, 96, 95, 94,// 144
		65, 35, 66, 38, 42, 69, 60, 51, 85, 85, 75, 36, 77, 72, 79, 62,// 160
		46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,// 176
		46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,// 192
		46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,// 208
		80, 67, 84, 89, 91, 88, 93, 52, 40, 41, 64, 126, 34, 96, 95, 94,// 224
		46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46// 240
	};

	uchar FontIndexSmall[ 128 ] = { // 0x004893F0
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,// 0
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,// 16
		0, 54, 44, 57, 58, 56, 55, 47, 40, 41, 59, 39, 50, 37, 51, 52,// 32
		36, 27, 28, 29, 30, 31, 32, 33, 34, 35, 48, 49, 60, 38, 61, 53,// 48
		62, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,// 64
		16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 42, 63, 43, 64, 65,// 80
		46, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,// 96
		16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 0, 66, 0, 67, 0// 112
	};

	uchar FontIndexMid[ 128 ] = {

	};

	uchar FontIndexBig[ 128 ] = {

	};

	uchar FontWidthSmall[ 68 ] = {

	};

	uchar FontWidthMid[ 56 ] = {

	};

	uchar FontWidthBig[ 56 ] = {

	};
}

// Stream executable is version 1.0, have to find addresses by .cel refs
namespace Stream
{
	char* FontSpriteSmall;
	char* FontSpriteMid;
	char* FontSpriteBig;

	uchar Codepage[ 256 ] = {

	};

	uchar FontIndexSmall[ 128 ] = {

	};

	uchar FontIndexMid[ 128 ] = {

	};

	uchar FontIndexBig[ 128 ] = {

	};

	uchar FontWidthSmall[ 68 ] = {

	};

	uchar FontWidthMid[ 56 ] = {

	};

	uchar FontWidthBig[ 56 ] = {

	};
}

// используются при отрисовке
// 0x004B6EFD
int DwordArray_2[48] = { 
	0, 0, 0, 4, 4, 4, 8, 8, 8, 12, 12, 12, 16, 16, 16, 20, 20, 20,
	24, 24, 24, 28, 28, 28, 32, 32, 32, 36, 36, 36, 40, 40, 40,
	44, 44, 44, 48, 48, 48, 52, 52, 52, 56, 56, 56, 60, 60, 60
};
int DwordArray_3[17] = {
		0x00, 0x04, 0x08, 0x10, 0x18, 0x24, 0x30, 0x40, 
		0x50, 0x64, 0x78, 0x90, 0xA8, 0xC4, 0xE0, 0x100, 0x120 
};
int DwordArray_4[17] = {
		0x00, 0x20, 0x3C, 0x58, 0x70, 0x88, 0x9C, 0xB0, 
		0xC0, 0xD0, 0xDC, 0xE8, 0xF0, 0xF8, 0xFC, 0x100, 0x120 
};

//char InfoPanelHeader[MAX_PATH]; // дубликат со StingBuffer бывший 
char InfoPanel4Lines[4][64];// 004D1400
int InfoPanelLinesCentered[4];// 004D1180
int InfoPanelLinesUsed; // 004D1190
int InfoPanelUsed; // 004D1194
char CurFontColor; // 004D11AC

void(__fastcall * DrawPlayerFunc)(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10);

int CurPitch;

uchar SomeByte_1;
char String80Array8Index;
int PentSpn2PicIndex;
char TalkPanelMessage[80];
uchar* MainPanelImage; // декодированные (чистые пиксели) имеют тип uchar*
char* CtrlPan_TalkButtCEL; // не декодированные CEL данные имеют тип char*
uchar* LifeShereImage; // декодированный (uchar*)
uchar* ManaShereImage; // декодированный (uchar*)
Item UniqueInfo;
uchar IconColors[256];
int SelectedSpellType;

#ifndef TH1
// 00A36200
CompleteSetEffect CompleteSetEffects [20] = { 
	{'koJ*'	, AE_SPELLS_LEVEL,	0,	3,	3,	0,	0,	0,	0	}, // Joker
	{'neR*'	, AE_DFE,	0,	-70,	-70,	0,	0,	0,	0	}, // Renegade
	{'alG*'	, AE_SPECIAL_AC,	0,	200,	200,	0,	0,	0,	0	}, // Gladiator
	{'riS*'	, AE_TO_HIT,	0,	200,	200,	0,	0,	0,	0	}, // Sirius
	{'ocS*'	, AE_MANA,	0,	600,	600,	0,	0,	0,	0	}, // Scout
	{'fnI*'	, AE_DAMAGE,	0,	300,	300,	0,	0,	0,	0	}, // Infernal
	{'leC*'	, AE_HIT_POINTS,	0,	400,	400,	0,	0,	0,	0	}, // Celestial
	{END_MARKER},
};
#endif

Item SetBufferItemForShowEffect; // 0x00A36400
// 004A04B8
MenuStruct SPMainMenu[6] = {
		{0x80000000,  "Save Game", 	SaveGameMenuHandler},// 0	// ...
		{0x80000000,  "Setup",  SetupMenuHandler},//	1 // "Exit The Hell"
		{0x80000000,  "New Game",	 NewGameMenuHandler},// 2
		{0x80000000,  "Load Game", 	LoadGameMenuHandler},// 3
		{0x80000000,  th2 ? "Quit" : "Quit The Hell", ExitGameMenuHandler},// 4
		{0x80000000, 0, 0}// 5
};
// 004A0500
MenuStruct MPMainMenu[5] = {
		{0x80000000,  "Setup",  SetupMenuHandler},//	0 // ...
		{0x80000000,  "New Game",	 NewGameMenuHandler},// 1 //	"Restart In Town"
		{0x80000000,  "Restart In Town", RestartMenuHandler},//	2
		{0x80000000,  th2 ? "Quit" : "Quit The Hell", ExitGameMenuHandler},// 3
		{0x80000000, 0, 0}// 4
};
// 004A0540
MenuStruct OptionsMenu[6] = {
		{0x0C0000000,	0,  MusicMenuHandler}, // ...
		{0x0C0000000,	0,  SoundMenuHandler}, // ...
		{0x0C0000000,	 "Gamma",  GammaMenuHandler},	// ...
		{0x0C0000000,	0,  WalkMenuHandler}, // ...
		{0x80000000,	 "Previous Menu",	 GoBackMenuHandler},// 0 // "Go Back"
		{0x80000000, 0, 0}
};
HMODULE DirectSoundModule;
IDirectSoundBuffer* IDirectSoundBufferPtr;
LPDIRECTSOUNDBUFFER LpDsbDuplicate8Array[8];
IDirectSound* DirectSoundPtr;
int SoundVolume;
int MusicVolume;
HANDLE ThemeMusicPtr;
int	MonsterMoveIndex; // 006EE730

ItemInfo Item_Update; // 00A360B0
char ItemUpdateTimer = 0; // 00A36100

// 00A38B00
// новая табличка из ~500 байт. Каждый байт обозначает
// какую анимацию крит сплеша монстр имеет, если имеет
uchar CritSplashNumbers[501] = {
	1, 3, 1, 0, 1, 1, 1, 0, 2, 0, 2, 0, 1, 1, 2, 1, 1, 0, 1, 0,
	0, 0, 2, 0, 0, 0, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 3, 1, 1, 0, 0, 1, 1, 1, 0, 0,
	3, 0, 3, 0, 3, 1, 1, 1, 1, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	1, 3, 3, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 0, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 3, 1, 3, 0, 1, 1, 0, 1, 0,
	1, 0, 3, 1, 1, 0, 1, 0, 1, 0, 3, 0, 0, 1, 1, 1, 1, 0, 0, 0,
	1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0 
};

// 00A38D20
uchar CritAnimationsIndexTable[9] = { 2, 1, 2, 1, 0, 0, 1, 0, 1 };

// 00A3A290
uchar OilQuality[10] = { 1, 5, 10, 18, 27, 3, 43, 35, 49, 24 };

// 00A37A78
char* IceLevelMuz[8] = {
	"Music\\Dtown7.wav",
	"Music\\DungeonDeep.wav",
	"Music\\RazB.wav",
	"Music\\Caverns_of_Ice.wav",
	"Music\\Dintr1.wav",
	"Music\\DungeonDeep.wav",
	"Music\\valley.wav",
	"Music\\Dintr2.wav"
};

// 00A39658
char* PwsMusicPack[8] = {
	"Music\\Dtown7.wav",
	"Music\\DungeonDeep.wav",
	"Music\\RazB.wav",
	"Music\\DungeonDeep.wav",
	"Music\\Dintr1.wav",
	"Music\\DungeonDeep.wav",
	"Music\\valley.wav",
	"Music\\Dintr2.wav"
};
	
// 00A3A028
char* OtherQuestMusic[8] = {
	"Music\\Dtown7.wav",
	"music\\alv4.wav",
	"Music\\RazB.wav",
	"music\\pofv2.wav",
	"Music\\Dintr1.wav",
	"music\\bloodcrypt_v2.wav",
	"music\\w4r2pv2.wav",
	"Music\\Dintr2.wav",
};

// 00834EE8
char MonsterIntel_1[ 16 ] = { 1, 52, 1, 1, 7, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
// 008355F0
char MonsterIntel_2[ 16 ] = { 1, 52, 52, 6, 6, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

char* Elements[] = {
	"Physical",	// ET_0_PHYSICAL = 0,
	"Fire",		// ET_1_FIRE = 1,
	"Lightning",// ET_2_LIGHTNING = 2,
	"Arcane",	// ET_3_ARCAN = 3,
	"Acid",		// ET_4_ACID = 4,
	"Holy",		// ET_5_HOLY = 5, // th2
	"Cold",		// ET_6_COLD = 6, // новые
	"Curse",	// ET_7_CURSE = 7, // уже восемь типов магии (byte mask full)
};

char* Spicies[] = {
	"Undead",	// MON_0_UNDEAD = 0,
	"Demons",	// MON_1_DEMON = 1,
	"Beasts",	// MON_2_BEAST = 2,
	"Unknown"
};

char* Weapons[] = {
	"Sword",	// W_SWORD,
	"Mace",		// W_MACE,
	"Axe",		// W_AXE,
	"Polearm",	// W_POLEARM,
	"Bow",		// W_BOW,
	"Crossbow",	// W_CROSSBOW,
	"Staff",	// W_STAFF,
};
